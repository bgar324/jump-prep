\n\n# ===== ./d-5/page.tsx =====\n
\n\n# ===== ./d-5/page.tsx =====\n
"use client";

import { useState, useEffect } from "react";

interface Stock {
  id: number;
  symbol: string;
  price: number;
  prevPrice: number;
}

export default function App() {
  const [input, setInput] = useState("");
  const [stocks, setStocks] = useState<Stock[]>([]);
  const [query, setQuery] = useState("");

  useEffect(() => {
    let interval = setInterval(() => {
      setStocks((prevStocks) => {
        const n = prevStocks.length;
        if (n === 0) return prevStocks; // Handle empty array case
        const randomIndex = Math.floor(Math.random() * n);
        const prevStock = prevStocks[randomIndex];

        // Calculate new price
        const prevPrice = prevStock.price;
        const multiplier = (Math.random() * 0.1 - 0.05) + 1;
        const newPrice = prevPrice * multiplier;
        const clamped = Math.max(0.1, newPrice);
        const newNewPrice = Math.round(clamped * 100) / 100;

        // Create updated stock object
        const updatedStock = {
          ...prevStock,
          price: newNewPrice,
          prevPrice: prevPrice,
        };

        // Return new array with updated stock
        return prevStocks.map((stock, index) =>
          index === randomIndex ? updatedStock : stock
        );
      });
    }, 3000);
    return () => clearInterval(interval);
  }, []);

  const handleAdd = () => {
    if (!input.trim()) return;
    const seed = Math.floor(Math.random() * (300 - 50 + 1)) + 50;
    const upperSymbol = input.trim().toUpperCase();
    setStocks([
      ...stocks,
      { id: Date.now(), symbol: upperSymbol, price: seed, prevPrice: seed },
    ]);
    setInput("");
  };

  const handleRemove = (id: number) => {
    setStocks(stocks.filter((stock) => stock.id !== id));
  };

  const filtered = stocks.filter((s) => {
    return s.symbol.toLowerCase().includes(query.toLowerCase());
  });

  return (
    <div className="min-h-screen bg-white p-8">
      <div className="max-w-2xl mx-auto">
        <input
          type="text"
          value={query}
          onChange={(e) => setQuery(e.target.value)}
          placeholder="Search stocks..."
          className="w-full px-4 py-2 mb-6 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-400"
        />

        <div className="mb-8">
          <div className="flex gap-3">
            <input
              type="text"
              value={input}
              onChange={(e) => setInput(e.target.value)}
              placeholder="Add stock symbol..."
              className="flex-1 px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-400"
            />
            <button
              onClick={handleAdd}
              className="px-6 py-2 bg-gray-100 border border-gray-300 rounded-md hover:bg-gray-200 transition-colors"
            >
              Add
            </button>
          </div>
        </div>
        {filtered.length === 0 ? (
          <div className="text-gray-500 text-center py-8">
            {query ? `No stocks match "${query}"` : "No stocks yet"}
          </div>
        ) : (
          <div className="space-y-2">
            {filtered.map((stock) => (
              <div key={stock.id} className="flex items-center justify-between p-4 bg-gray-50 border border-gray-200 rounded-md">
                <div className="flex items-center gap-4">
                  <span className="font-medium text-gray-900">{stock.symbol}</span>
                  <span className="text-gray-700">${stock.price.toFixed(2)}</span>
                </div>
                {stock.prevPrice > stock.price ? <h1>down</h1> : <h1>up</h1>}
                <button
                  onClick={() => handleRemove(stock.id)}
                  className="px-3 py-1 text-sm text-gray-600 bg-white border border-gray-300 rounded hover:bg-gray-50 transition-colors"
                >
                  Remove
                </button>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}
"use client";

import { useState, useEffect } from "react";

interface Stock {
  id: number;
  symbol: string;
  price: number;
  prevPrice: number;
}

export default function App() {
  const [input, setInput] = useState("");
  const [stocks, setStocks] = useState<Stock[]>([]);
  const [query, setQuery] = useState("");

  useEffect(() => {
    let interval = setInterval(() => {
      setStocks((prevStocks) => {
        const n = prevStocks.length;
        if (n === 0) return prevStocks; // Handle empty array case
        const randomIndex = Math.floor(Math.random() * n);
        const prevStock = prevStocks[randomIndex];

        // Calculate new price
        const prevPrice = prevStock.price;
        const multiplier = (Math.random() * 0.1 - 0.05) + 1;
        const newPrice = prevPrice * multiplier;
        const clamped = Math.max(0.1, newPrice);
        const newNewPrice = Math.round(clamped * 100) / 100;

        // Create updated stock object
        const updatedStock = {
          ...prevStock,
          price: newNewPrice,
          prevPrice: prevPrice,
        };

        // Return new array with updated stock
        return prevStocks.map((stock, index) =>
          index === randomIndex ? updatedStock : stock
        );
      });
    }, 3000);
    return () => clearInterval(interval);
  }, []);

  const handleAdd = () => {
    if (!input.trim()) return;
    const seed = Math.floor(Math.random() * (300 - 50 + 1)) + 50;
    const upperSymbol = input.trim().toUpperCase();
    setStocks([
      ...stocks,
      { id: Date.now(), symbol: upperSymbol, price: seed, prevPrice: seed },
    ]);
    setInput("");
  };

  const handleRemove = (id: number) => {
    setStocks(stocks.filter((stock) => stock.id !== id));
  };

  const filtered = stocks.filter((s) => {
    return s.symbol.toLowerCase().includes(query.toLowerCase());
  });

  return (
    <div className="min-h-screen bg-white p-8">
      <div className="max-w-2xl mx-auto">
        <input
          type="text"
          value={query}
          onChange={(e) => setQuery(e.target.value)}
          placeholder="Search stocks..."
          className="w-full px-4 py-2 mb-6 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-400"
        />

        <div className="mb-8">
          <div className="flex gap-3">
            <input
              type="text"
              value={input}
              onChange={(e) => setInput(e.target.value)}
              placeholder="Add stock symbol..."
              className="flex-1 px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-gray-400"
            />
            <button
              onClick={handleAdd}
              className="px-6 py-2 bg-gray-100 border border-gray-300 rounded-md hover:bg-gray-200 transition-colors"
            >
              Add
            </button>
          </div>
        </div>
        {filtered.length === 0 ? (
          <div className="text-gray-500 text-center py-8">
            {query ? `No stocks match "${query}"` : "No stocks yet"}
          </div>
        ) : (
          <div className="space-y-2">
            {filtered.map((stock) => (
              <div key={stock.id} className="flex items-center justify-between p-4 bg-gray-50 border border-gray-200 rounded-md">
                <div className="flex items-center gap-4">
                  <span className="font-medium text-gray-900">{stock.symbol}</span>
                  <span className="text-gray-700">${stock.price.toFixed(2)}</span>
                </div>
                {stock.prevPrice > stock.price ? <h1>down</h1> : <h1>up</h1>}
                <button
                  onClick={() => handleRemove(stock.id)}
                  className="px-3 py-1 text-sm text-gray-600 bg-white border border-gray-300 rounded hover:bg-gray-50 transition-colors"
                >
                  Remove
                </button>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}
\n\n# ===== ./d-2/page.tsx =====\n
\n\n# ===== ./d-2/page.tsx =====\n
// Required fields:
// - Stock symbol (text input)
// - Quantity (number input)
// - Price per share (number input)
// - Order type: Buy or Sell (toggle/radio buttons)

// Calculated field:
// - Total cost (quantity Ã— price) - should update automatically

// Submit button:
// - Should console.log the order details
// - Format: { symbol, quantity, price, orderType, total }

// Validation requirements:
// - All fields are required before submission
// - Quantity must be a positive integer (> 0)
// - Price must be a positive number (> 0)
// - Symbol must not be empty
// - Show error messages for invalid fields
// - Disable submit button if form is invalid

"use client";

import { useState } from "react";

interface OrderForm {
  stock: string;
  quantity: number;
  price: number;
  orderType: "buy" | "sell";
}

export default function App() {
  const [stock, setStock] = useState<string>("");
  const [quantity, setQuantity] = useState<number | "">("");
  const [price, setPrice] = useState<number | "">("");
  const [orderType, setOrderType] = useState<"buy" | "sell">("buy");
  const total = (typeof quantity === 'number' && typeof price === 'number') ? quantity * price : 0;

  const stockError = stock.trim() === "" ? "Stock Symbol Required" : "";
  const quantityError =
    quantity === "" || quantity <= 0 || !Number.isInteger(quantity)
      ? "Quantity must be an integer"
      : "";
  const priceError = price === "" || price <= 0 ? "Price must be greater than 0" : "";

  const isValid = !stockError && !quantityError && !priceError;

  const handleSubmit = () => {
    if (!isValid) return;

    const order = {
      symbol: stock,
      quantity,
      price,
      orderType,
      total,
    };
    console.log(order);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 flex items-center justify-center p-4">
      <div className="bg-white/80 backdrop-blur-sm rounded-2xl shadow-xl border border-white/20 p-8 w-full max-w-sm">
        <h1 className="text-3xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent text-center mb-8">
          Stock Order
        </h1>

        <div className="space-y-6">
          {/* Stock Symbol */}
          <div className="space-y-2">
            <label className="text-sm font-medium text-gray-700">
              Stock Symbol
            </label>
            <input
              type="text"
              value={stock}
              onChange={(e) => setStock(e.target.value)}
              placeholder="AAPL"
              className="w-full px-4 py-3 bg-white/50 border border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 placeholder:text-gray-400"
            />
          </div>

          {/* Quantity */}
          <div className="space-y-2">
            <label className="text-sm font-medium text-gray-700">
              Quantity
            </label>
            <input
              type="number"
              value={quantity}
              onChange={(e) => setQuantity(parseInt(e.target.value) || "")}
              placeholder="quantity"
              className="w-full px-4 py-3 bg-white/50 border border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 placeholder:text-gray-400"
            />
          </div>

          {/* Price */}
          <div className="space-y-2">
            <label className="text-sm font-medium text-gray-700">
              Price per Share
            </label>
            <div className="relative">
              <span className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-500 font-medium">
                $
              </span>
              <input
                type="number"
                value={price}
                onChange={(e) => setPrice(parseFloat(e.target.value) || "")}
                placeholder="price"
                className="w-full pl-8 pr-4 py-3 bg-white/50 border border-gray-200 rounded-// Required fields:
// - Stock symbol (text input)
// - Quantity (number input)
// - Price per share (number input)
// - Order type: Buy or Sell (toggle/radio buttons)

// Calculated field:
// - Total cost (quantity Ã— price) - should update automatically

// Submit button:
// - Should console.log the order details
// - Format: { symbol, quantity, price, orderType, total }

// Validation requirements:
// - All fields are required before submission
// - Quantity must be a positive integer (> 0)
// - Price must be a positive number (> 0)
// - Symbol must not be empty
// - Show error messages for invalid fields
// - Disable submit button if form is invalid

"use client";

import { useState } from "react";

interface OrderForm {
  stock: string;
  quantity: number;
  price: number;
  orderType: "buy" | "sell";
}

export default function App() {
  const [stock, setStock] = useState<string>("");
  const [quantity, setQuantity] = useState<number | "">("");
  const [price, setPrice] = useState<number | "">("");
  const [orderType, setOrderType] = useState<"buy" | "sell">("buy");
  const total = (typeof quantity === 'number' && typeof price === 'number') ? quantity * price : 0;

  const stockError = stock.trim() === "" ? "Stock Symbol Required" : "";
  const quantityError =
    quantity === "" || quantity <= 0 || !Number.isInteger(quantity)
      ? "Quantity must be an integer"
      : "";
  const priceError = price === "" || price <= 0 ? "Price must be greater than 0" : "";

  const isValid = !stockError && !quantityError && !priceError;

  const handleSubmit = () => {
    if (!isValid) return;

    const order = {
      symbol: stock,
      quantity,
      price,
      orderType,
      total,
    };
    console.log(order);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 flex items-center justify-center p-4">
      <div className="bg-white/80 backdrop-blur-sm rounded-2xl shadow-xl border border-white/20 p-8 w-full max-w-sm">
        <h1 className="text-3xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent text-center mb-8">
          Stock Order
        </h1>

        <div className="space-y-6">
          {/* Stock Symbol */}
          <div className="space-y-2">
            <label className="text-sm font-medium text-gray-700">
              Stock Symbol
            </label>
            <input
              type="text"
              value={stock}
              onChange={(e) => setStock(e.target.value)}
              placeholder="AAPL"
              className="w-full px-4 py-3 bg-white/50 border border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 placeholder:text-gray-400"
            />
          </div>

          {/* Quantity */}
          <div className="space-y-2">
            <label className="text-sm font-medium text-gray-700">
              Quantity
            </label>
            <input
              type="number"
              value={quantity}
              onChange={(e) => setQuantity(parseInt(e.target.value) || "")}
              placeholder="quantity"
              className="w-full px-4 py-3 bg-white/50 border border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 placeholder:text-gray-400"
            />
          </div>

          {/* Price */}
          <div className="space-y-2">
            <label className="text-sm font-medium text-gray-700">
              Price per Share
            </label>
            <div className="relative">
              <span className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-500 font-medium">
                $
              </span>
              <input
                type="number"
                value={price}
                onChange={(e) => setPrice(parseFloat(e.target.value) || "")}
                placeholder="price"
                className="w-full pl-8 pr-4 py-3 bg-white/50 border border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 placeholder:text-gray-400"
              />
            </div>
          </div>

          {/* Order Type */}
          <div className="space-y-3">
            <label className="text-sm font-medium text-gray-700">
              Order Type
            </label>
            <div className="flex gap-4">
              <label className="flex items-center space-x-2 cursor-pointer">
                <input
                  type="radio"
                  checked={orderType == "buy"}
                  onChange={() => setOrderType("buy")}
                  className="w-4 h-4 text-blue-600 focus:ring-blue-500"
                />
                <span
                  className={`px-4 py-2 rounded-lg text-sm font-medium transition-all ${
                    orderType === "buy"
                      ? "bg-green-500 text-white shadow-md"
                      : "bg-gray-100 text-gray-600 hover:bg-gray-200"
                  }`}
                >
                  Buy
                </span>
              </label>
              <label className="flex items-center space-x-2 cursor-pointer">
                <input
                  type="radio"
                  checked={orderType == "sell"}
                  onChange={() => setOrderType("sell")}
                  className="w-4 h-4 text-red-600 focus:ring-red-500"
                />
                <span
                  className={`px-4 py-2 rounded-lg text-sm font-medium transition-all ${
                    orderType === "sell"
                      ? "bg-red-500 text-white shadow-md"
                      : "bg-gray-100 text-gray-600 hover:bg-gray-200"
                  }`}
                >
                  Sell
                </span>
              </label>
            </div>
          </div>

          {/* Total Display */}
          <div className="bg-gradient-to-r from-gray-50 to-gray-100 rounded-xl p-4 border border-gray-200">
            <div className="text-sm font-medium text-gray-600 mb-1">
              Total Value
            </div>
            <div className="text-2xl font-bold text-gray-800">
              ${total.toLocaleString()}
            </div>
            <div className="text-xs text-gray-500 mt-1">
              {quantity || 0} Ã— ${price || 0}
            </div>
          </div>
          <button
            onClick={handleSubmit}
            disabled={!isValid}
            className={`w-full py-3 rounded-xl font-semibold transition-all ${
              isValid
                ? "bg-blue-600 text-white hover:bg-blue-700"
                : "bg-gray-300 text-gray-500 cursor-not-allowed"
            }`}
          >
            Submit
          </button>
        </div>
      </div>
    </div>
  );
}
xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 placeholder:text-gray-400"
              />
            </div>
          </div>

          {/* Order Type */}
          <div className="space-y-3">
            <label className="text-sm font-medium text-gray-700">
              Order Type
            </label>
            <div className="flex gap-4">
              <label className="flex items-center space-x-2 cursor-pointer">
                <input
                  type="radio"
                  checked={orderType == "buy"}
                  onChange={() => setOrderType("buy")}
                  className="w-4 h-4 text-blue-600 focus:ring-blue-500"
                />
                <span
                  className={`px-4 py-2 rounded-lg text-sm font-medium transition-all ${
                    orderType === "buy"
                      ? "bg-green-500 text-white shadow-md"
                      : "bg-gray-100 text-gray-600 hover:bg-gray-200"
                  }`}
                >
                  Buy
                </span>
              </label>
              <label className="flex items-center space-x-2 cursor-pointer">
                <input
                  type="radio"
                  checked={orderType == "sell"}
                  onChange={() => setOrderType("sell")}
                  className="w-4 h-4 text-red-600 focus:ring-red-500"
                />
                <span
                  className={`px-4 py-2 rounded-lg text-sm font-medium transition-all ${
                    orderType === "sell"
                      ? "bg-red-500 text-white shadow-md"
                      : "bg-gray-100 text-gray-600 hover:bg-gray-200"
                  }`}
                >
                  Sell
                </span>
              </label>
            </div>
          </div>

          {/* Total Display */}
          <div className="bg-gradient-to-r from-gray-50 to-gray-100 rounded-xl p-4 border border-gray-200">
            <div className="text-sm font-medium text-gray-600 mb-1">
              Total Value
            </div>
            <div className="text-2xl font-bold text-gray-800">
              ${total.toLocaleString()}
            </div>
            <div className="text-xs text-gray-500 mt-1">
              {quantity || 0} Ã— ${price || 0}
            </div>
          </div>
          <button
            onClick={handleSubmit}
            disabled={!isValid}
            className={`w-full py-3 rounded-xl font-semibold transition-all ${
              isValid
                ? "bg-blue-600 text-white hover:bg-blue-700"
                : "bg-gray-300 text-gray-500 cursor-not-allowed"
            }`}
          >
            Submit
          </button>
        </div>
      </div>
    </div>
  );
}
\n\n# ===== ./d-21/main.py =====\n
\n\n# ===== ./d-21/main.py =====\n
from functools import reduce

trades = [
    {"id": 1, "symbol": "AAPL", "side": "BUY", "price": 150, "quantity": 50},
    {"id": 2, "symbol": "AAPL", "side": "SELL", "price": 152, "quantity": 20},
    {"id": 3, "symbol": "TSLA", "side": "BUY", "price": 240, "quantity": 150},
    {"id": 4, "symbol": "MSFT", "side": "BUY", "price": 380, "quantity": 80},
    {"id": 5, "symbol": "TSLA", "side": "SELL", "price": 245, "quantity": 120},
    {"id": 6, "symbol": "NVDA", "side": "BUY", "price": 900, "quantity": 15},
]

prices = list(map(lambda t: t["price"], trades))
filtered_prices = list(filter(lambda t : t["price"] * t["quantity"] > 10000 , trades))
total_value = reduce(lambda sum, t : sum + (t["price"] * t["quantity"]), trades, 0)
sorted_trades = sorted(trades, key = lambda t : (t["symbol"], t["price"]))

print("Problem 1")
print(prices)

print("Problem 2")
print(filtered_prices)

print("Problem 3")
print(total_value)

print("Problem 4")
print(sorted_trades)from functools import reduce

trades = [
    {"id": 1, "symbol": "AAPL", "side": "BUY", "price": 150, "quantity": 50},
    {"id": 2, "symbol": "AAPL", "side": "SELL", "price": 152, "quantity": 20},
    {"id": 3, "symbol": "TSLA", "side": "BUY", "price": 240, "quantity": 150},
    {"id": 4, "symbol": "MSFT", "side": "BUY", "price": 380, "quantity": 80},
    {"id": 5, "symbol": "TSLA", "side": "SELL", "price": 245, "quantity": 120},
    {"id": 6, "symbol": "NVDA", "side": "BUY", "price": 900, "quantity": 15},
]

prices = list(map(lambda t: t["price"], trades))
filtered_prices = list(filter(lambda t : t["price"] * t["quantity"] > 10000 , trades))
total_value = reduce(lambda sum, t : sum + (t["price"] * t["quantity"]), trades, 0)
sorted_trades = sorted(trades, key = lambda t : (t["symbol"], t["price"]))

print("Problem 1")
print(prices)

print("Problem 2")
print(filtered_prices)

print("Problem 3")
print(total_value)

print("Problem 4")
print(sorted_trades)\n\n# ===== ./d-19/main.py =====\n
\n\n# ===== ./d-19/main.py =====\n
trades = [
    {"id": 1, "symbol": "AAPL", "side": "BUY", "price": 20, "quantity": 50},
    {"id": 2, "symbol": "AAPL", "side": "SELL", "price": 152, "quantity": 20},
    {"id": 3, "symbol": "TSLA", "side": "BUY", "price": 240, "quantity": 150},
    {"id": 4, "symbol": "MSFT", "side": "BUY", "price": 380, "quantity": 80},
    {"id": 5, "symbol": "TSLA", "side": "SELL", "price": 245, "quantity": 120},
]

trade_prices = [t["price"] for t in trades]
large_trades = [t["price"] for t in trades if t["price"] > 100]
unduped_trades = {t["symbol"] for t in trades}
trade_lookup = {t["id"] : (t["symbol"], t["price"]) for t in trades}
total_values = (t["price"] * t["quantity"] for t in trades)

print ("Problem 1")
print(trade_prices)

print ("Problem 2")
print(large_trades)

print ("Problem 3")
print(unduped_trades)

print ("Problem 4")
print(trade_lookup)

print("Problem 5")
for t in total_values:
  print(t)trades = [
    {"id": 1, "symbol": "AAPL", "side": "BUY", "price": 20, "quantity": 50},
    {"id": 2, "symbol": "AAPL", "side": "SELL", "price": 152, "quantity": 20},
    {"id": 3, "symbol": "TSLA", "side": "BUY", "price": 240, "quantity": 150},
    {"id": 4, "symbol": "MSFT", "side": "BUY", "price": 380, "quantity": 80},
    {"id": 5, "symbol": "TSLA", "side": "SELL", "price": 245, "quantity": 120},
]

trade_prices = [t["price"] for t in trades]
large_trades = [t["price"] for t in trades if t["price"] > 100]
unduped_trades = {t["symbol"] for t in trades}
trade_lookup = {t["id"] : (t["symbol"], t["price"]) for t in trades}
total_values = (t["price"] * t["quantity"] for t in trades)

print ("Problem 1")
print(trade_prices)

print ("Problem 2")
print(large_trades)

print ("Problem 3")
print(unduped_trades)

print ("Problem 4")
print(trade_lookup)

print("Problem 5")
for t in total_values:
  print(t)\n\n# ===== ./d-10/frontend/page.tsx =====\n
\n\n# ===== ./d-10/frontend/page.tsx =====\n
"use client";
import { useState, useEffect } from "react";

const API_BASE = "http://localhost:5001";

interface Task {
  id: number;
  text: string;
  completed: boolean;
}

export default function App() {
  const [tasks, setTasks] = useState<Task[]>([]);
  const [query, setQuery] = useState("");

  useEffect(() => {
    fetch(`${API_BASE}/tasks`)
      .then((res) => res.json())
      .then((data: Task[]) => setTasks(data))
      .catch((err) => console.error(err));
  }, []);

  async function addTask(text: string) {
    const res = await fetch(`${API_BASE}/tasks`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ text }),
    });
    const newTask: Task = await res.json();
    setTasks((prev) => [...prev, newTask]);
    setQuery("")
  }

  async function deleteTask(id : number) {
    const res = await fetch( `${API_BASE}/tasks/${id}`, {
      method: "DELETE",
    });

    setTasks((prev) => prev.filter((t) => t.id !== id))
  }


  return (
    <main className="flex min-h-screen flex-col items-center justify-center bg-gray-50">
      <div className="w-full max-w-7xl px-6">
        <input
          placeholder="add a task"
          type="text"
          value={query}
          onChange={(e) => setQuery(e.target.value)}
        />
        <button disabled={!query.trim()} onClick={() => addTask(query)}>
          add
        </button>
      </div>
      {tasks.length > 0 ? (
        tasks.map((e) => (
          <ul key={e.id}>
            <li>{e.text}</li>
            <button onClick = {() => deleteTask(e.id)}>âœ–</button>
          </ul>
        ))
      ) : (
        <h1>empty list.</h1>
      )}
    </main>
  );
}
"use client";
import { useState, useEffect } from "react";

const API_BASE = "http://localhost:5001";

interface Task {
  id: number;
  text: string;
  completed: boolean;
}

export default function App() {
  const [tasks, setTasks] = useState<Task[]>([]);
  const [query, setQuery] = useState("");

  useEffect(() => {
    fetch(`${API_BASE}/tasks`)
      .then((res) => res.json())
      .then((data: Task[]) => setTasks(data))
      .catch((err) => console.error(err));
  }, []);

  async function addTask(text: string) {
    const res = await fetch(`${API_BASE}/tasks`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ text }),
    });
    const newTask: Task = await res.json();
    setTasks((prev) => [...prev, newTask]);
    setQuery("")
  }

  async function deleteTask(id : number) {
    const res = await fetch( `${API_BASE}/tasks/${id}`, {
      method: "DELETE",
    });

    setTasks((prev) => prev.filter((t) => t.id !== id))
  }


  return (
    <main className="flex min-h-screen flex-col items-center justify-center bg-gray-50">
      <div className="w-full max-w-7xl px-6">
        <input
          placeholder="add a task"
          type="text"
          value={query}
          onChange={(e) => setQuery(e.target.value)}
        />
        <button disabled={!query.trim()} onClick={() => addTask(query)}>
          add
        </button>
      </div>
      {tasks.length > 0 ? (
        tasks.map((e) => (
          <ul key={e.id}>
            <li>{e.text}</li>
            <button onClick = {() => deleteTask(e.id)}>âœ–</button>
          </ul>
        ))
      ) : (
        <h1>empty list.</h1>
      )}
    </main>
  );
}
\n\n# ===== ./d-10/backend/main.py =====\n
\n\n# ===== ./d-10/backend/main.py =====\n
from flask import Flask, jsonify, request
from flask_cors import CORS

app = Flask(__name__)
CORS(app)

TASKS = []

@app.route("/tasks", methods = ["GET"])
def handleGetAllTasks():
    return jsonify(TASKS), 200

@app.route("/tasks", methods=["POST"])
def handleAddTask():
    data = request.get_json()
    text = data.get("text", "").strip()  # âœ… variable renamed

    if not text:  # âœ… now refers to the right variable
        return jsonify({"error": "Task text required"}), 400

    new_task = {
        "id": len(TASKS) + 1,
        "text": text,  # âœ… matches key
        "completed": False,
    }

    TASKS.append(new_task)
    return jsonify(new_task), 201

@app.route("/tasks/<int:id>", methods = ["DELETE"])
def handleDeleteTask(id):
    global TASKS
    existing = None
    for t in TASKS:
        if t["id"] == id:
            existing = t
            break
    
    if existing is None:
        return jsonify({"error": f"Task {id} not found"}), 404
    
    new_tasks = []
    for t in TASKS:
        if t["id"] != id:
            new_tasks.append(t)
    TASKS = new_tasks

    return jsonify({"message": f"Task {id} deleted"}), 200

if __name__ == "__main__":
    app.run(debug=True, host="0.0.0.0", port=5001)from flask import Flask, jsonify, request
from flask_cors import CORS

app = Flask(__name__)
CORS(app)

TASKS = []

@app.route("/tasks", methods = ["GET"])
def handleGetAllTasks():
    return jsonify(TASKS), 200

@app.route("/tasks", methods=["POST"])
def handleAddTask():
    data = request.get_json()
    text = data.get("text", "").strip()  # âœ… variable renamed

    if not text:  # âœ… now refers to the right variable
        return jsonify({"error": "Task text required"}), 400

    new_task = {
        "id": len(TASKS) + 1,
        "text": text,  # âœ… matches key
        "completed": False,
    }

    TASKS.append(new_task)
    return jsonify(new_task), 201

@app.route("/tasks/<int:id>", methods = ["DELETE"])
def handleDeleteTask(id):
    global TASKS
    existing = None
    for t in TASKS:
        if t["id"] == id:
            existing = t
            break
    
    if existing is None:
        return jsonify({"error": f"Task {id} not found"}), 404
    
    new_tasks = []
    for t in TASKS:
        if t["id"] != id:
            new_tasks.append(t)
    TASKS = new_tasks

    return jsonify({"message": f"Task {id} deleted"}), 200

if __name__ == "__main__":
    app.run(debug=True, host="0.0.0.0", port=5001)\n\n# ===== ./d-17/page.tsx =====\n
\n\n# ===== ./d-17/page.tsx =====\n
"use client";
import { useState } from "react";
import ChildA from "./components/ChildA";
import ChildB from "./components/ChildB";

export default function App() {
  const [value, setValue] = useState("");
  return (
    <main className="flex min-h-screen flex-col items-center justify-center bg-gray-50">
      <div className="w-full max-w-7xl px-6 flex flex-col">
        <ChildA value={value} setValue={setValue} />
        <ChildB value={value} />
      </div>
    </main>
  );
}
"use client";
import { useState } from "react";
import ChildA from "./components/ChildA";
import ChildB from "./components/ChildB";

export default function App() {
  const [value, setValue] = useState("");
  return (
    <main className="flex min-h-screen flex-col items-center justify-center bg-gray-50">
      <div className="w-full max-w-7xl px-6 flex flex-col">
        <ChildA value={value} setValue={setValue} />
        <ChildB value={value} />
      </div>
    </main>
  );
}
\n\n# ===== ./d-3/page.tsx =====\n
\n\n# ===== ./d-3/page.tsx =====\n
// Build a live stock price dashboard that displays and updates multiple stocks.

// Mock Data Structure:
// {
//   symbol: string,      // e.g., "AAPL"
//   price: number,       // e.g., 150.25
//   change: number       // e.g., 2.5 (percentage change, can be negative)
// }

// Required Features:
// 1. Display a table/list of 5 stocks showing:
//    - Stock symbol
//    - Current price (formatted as currency)
//    - Percentage change
//    - Color indicator (green for positive, red for negative)

// 2. Live updates:
//    - Every 3 seconds, randomly select one stock
//    - Update its price by Â±5% (random)
//    - Recalculate the percentage change

// 3. Search/Filter:
//    - Add a search input
//    - Filter the displayed stocks by symbol (case-insensitive)
//    - Show "No stocks found" if search returns no results

// 4. Use TypeScript for all data structures
// 5. Use proper React hooks (useState, useEffect)

"use client";

import { useState, useEffect } from "react";

interface Stock {
  symbol: string;
  price: number;
  previousPrice: number;
  change: number;
}

const initialStocks: Stock[] = [
  { symbol: "AAPL", price: 1500, previousPrice: 1500, change: 0 },
  { symbol: "GOOG", price: 2800, previousPrice: 2800, change: 0 },
  { symbol: "AMZN", price: 3400, previousPrice: 3400, change: 0 },
  { symbol: "TSLA", price: 700, previousPrice: 700, change: 0 },
  { symbol: "MSFT", price: 300, previousPrice: 300, change: 0 },
];

export default function App() {
  const [stocks, setStocks] = useState<Stock[]>(initialStocks);
  const [query, setQuery] = useState("");
  useEffect(() => {
    let interval = setInterval(() => {
      setStocks((prevStocks) => {
        const randomIndex = Math.floor(Math.random() * prevStocks.length);
        const oldStock = prevStocks[randomIndex];
        const multiplier = Math.random() * 0.1 - 0.05 + 1;
        const rawNewPrice = oldStock.price * multiplier; // new price

        const clamped = Math.max(0.01, rawNewPrice);
        const newPrice = Math.round(clamped * 100) / 100;

        const change = ((rawNewPrice - oldStock.price) / oldStock.price) * 100;

        const updatedStock = {
          ...oldStock,
          previousPrice: oldStock.price,
          price: newPrice,
          change,
        };

        const newStocks = prevStocks.map((stock, index) =>
          index === randomIndex ? updatedStock : stock
        );
        return newStocks;
      });
    }, 3000);

    return () => clearInterval(interval);
  }, []);

  const filtered = stocks.filter((s) =>
    s.symbol.toLowerCase().includes(query.toLowerCase())
  );

  return (
    <div className="min-h-screen bg-gray-50 p-8">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">
            Stock Dashboard
          </h1>
          <p className="text-gray-600">
            Real-time stock prices with live updates
          </p>
        </div>

        {/* Search Input */}
        <div className="mb-8 flex justify-center">
          <input
            type="text"
            placeholder="Search by symbol..."
            value={query}
            onChange={(e) => setQuery(e.target.value)}
            className="w-full max-w-md px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          /> 
        </div>

        {/* Table */}
        <div className="bg-white border border-gray-200 rounded-lg shadow-sm">
          <table className="w-full">
            <thead className="bg-gray-50 border-b border-gray-200">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Symbol
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Price
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 upper// Build a live stock price dashboard that displays and updates multiple stocks.

// Mock Data Structure:
// {
//   symbol: string,      // e.g., "AAPL"
//   price: number,       // e.g., 150.25
//   change: number       // e.g., 2.5 (percentage change, can be negative)
// }

// Required Features:
// 1. Display a table/list of 5 stocks showing:
//    - Stock symbol
//    - Current price (formatted as currency)
//    - Percentage change
//    - Color indicator (green for positive, red for negative)

// 2. Live updates:
//    - Every 3 seconds, randomly select one stock
//    - Update its price by Â±5% (random)
//    - Recalculate the percentage change

// 3. Search/Filter:
//    - Add a search input
//    - Filter the displayed stocks by symbol (case-insensitive)
//    - Show "No stocks found" if search returns no results

// 4. Use TypeScript for all data structures
// 5. Use proper React hooks (useState, useEffect)

"use client";

import { useState, useEffect } from "react";

interface Stock {
  symbol: string;
  price: number;
  previousPrice: number;
  change: number;
}

const initialStocks: Stock[] = [
  { symbol: "AAPL", price: 1500, previousPrice: 1500, change: 0 },
  { symbol: "GOOG", price: 2800, previousPrice: 2800, change: 0 },
  { symbol: "AMZN", price: 3400, previousPrice: 3400, change: 0 },
  { symbol: "TSLA", price: 700, previousPrice: 700, change: 0 },
  { symbol: "MSFT", price: 300, previousPrice: 300, change: 0 },
];

export default function App() {
  const [stocks, setStocks] = useState<Stock[]>(initialStocks);
  const [query, setQuery] = useState("");
  useEffect(() => {
    let interval = setInterval(() => {
      setStocks((prevStocks) => {
        const randomIndex = Math.floor(Math.random() * prevStocks.length);
        const oldStock = prevStocks[randomIndex];
        const multiplier = Math.random() * 0.1 - 0.05 + 1;
        const rawNewPrice = oldStock.price * multiplier; // new price

        const clamped = Math.max(0.01, rawNewPrice);
        const newPrice = Math.round(clamped * 100) / 100;

        const change = ((rawNewPrice - oldStock.price) / oldStock.price) * 100;

        const updatedStock = {
          ...oldStock,
          previousPrice: oldStock.price,
          price: newPrice,
          change,
        };

        const newStocks = prevStocks.map((stock, index) =>
          index === randomIndex ? updatedStock : stock
        );
        return newStocks;
      });
    }, 3000);

    return () => clearInterval(interval);
  }, []);

  const filtered = stocks.filter((s) =>
    s.symbol.toLowerCase().includes(query.toLowerCase())
  );

  return (
    <div className="min-h-screen bg-gray-50 p-8">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">
            Stock Dashboard
          </h1>
          <p className="text-gray-600">
            Real-time stock prices with live updates
          </p>
        </div>

        {/* Search Input */}
        <div className="mb-8 flex justify-center">
          <input
            type="text"
            placeholder="Search by symbol..."
            value={query}
            onChange={(e) => setQuery(e.target.value)}
            className="w-full max-w-md px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          /> 
        </div>

        {/* Table */}
        <div className="bg-white border border-gray-200 rounded-lg shadow-sm">
          <table className="w-full">
            <thead className="bg-gray-50 border-b border-gray-200">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Symbol
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Price
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Change
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Trend
                </th>
              </tr>
            </thead>
            <tbody className="divide-y divide-gray-200">
              {filtered.length === 0 ? (
                <tr>
                  <td
                    colSpan={4}
                    className="px-6 py-12 text-center text-gray-500"
                  >
                    No stocks found matching "{query}"
                  </td>
                </tr>
              ) : (
                filtered.map((stock) => (
                  <tr key={stock.symbol} className="hover:bg-gray-50">
                    {/* Symbol */}
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className="text-gray-900 font-medium">
                        {stock.symbol}
                      </span>
                    </td>

                    {/* Price */}
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className="text-gray-900 font-semibold">
                        ${stock.price}
                      </span>
                    </td>

                    {/* Change */}
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span
                        className={`font-medium ${
                          stock.change > 0
                            ? "text-green-600"
                            : stock.change < 0
                            ? "text-red-600"
                            : "text-gray-500"
                        }`}
                      >
                        {stock.change > 0 ? "+" : ""}
                        {stock.change.toFixed(2)}%
                      </span>
                    </td>

                    {/* Trend Indicator */}
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span
                        className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                          stock.change > 0
                            ? "bg-green-100 text-green-800"
                            : stock.change < 0
                            ? "bg-red-100 text-red-800"
                            : "bg-gray-100 text-gray-800"
                        }`}
                      >
                        {stock.change > 0 ? "â†—" : stock.change < 0 ? "â†˜" : "â†’"}
                      </span>
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        </div>

        {/* Footer */}
        <div className="text-center mt-8 text-gray-500 text-sm">
          Updates every 3 seconds
        </div>
      </div>
    </div>
  );
}
case tracking-wider">
                  Change
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Trend
                </th>
              </tr>
            </thead>
            <tbody className="divide-y divide-gray-200">
              {filtered.length === 0 ? (
                <tr>
                  <td
                    colSpan={4}
                    className="px-6 py-12 text-center text-gray-500"
                  >
                    No stocks found matching "{query}"
                  </td>
                </tr>
              ) : (
                filtered.map((stock) => (
                  <tr key={stock.symbol} className="hover:bg-gray-50">
                    {/* Symbol */}
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className="text-gray-900 font-medium">
                        {stock.symbol}
                      </span>
                    </td>

                    {/* Price */}
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className="text-gray-900 font-semibold">
                        ${stock.price}
                      </span>
                    </td>

                    {/* Change */}
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span
                        className={`font-medium ${
                          stock.change > 0
                            ? "text-green-600"
                            : stock.change < 0
                            ? "text-red-600"
                            : "text-gray-500"
                        }`}
                      >
                        {stock.change > 0 ? "+" : ""}
                        {stock.change.toFixed(2)}%
                      </span>
                    </td>

                    {/* Trend Indicator */}
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span
                        className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                          stock.change > 0
                            ? "bg-green-100 text-green-800"
                            : stock.change < 0
                            ? "bg-red-100 text-red-800"
                            : "bg-gray-100 text-gray-800"
                        }`}
                      >
                        {stock.change > 0 ? "â†—" : stock.change < 0 ? "â†˜" : "â†’"}
                      </span>
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        </div>

        {/* Footer */}
        <div className="text-center mt-8 text-gray-500 text-sm">
          Updates every 3 seconds
        </div>
      </div>
    </div>
  );
}
\n\n# ===== ./d-4/page.tsx =====\n
\n\n# ===== ./d-4/page.tsx =====\n
// Mock Data Structure:
// {
//   symbol: string,      // e.g., "AAPL"
//   price: number,       // e.g., 150.25
//   change: number       // e.g., 2.5 (percentage change, can be negative)
// }

// Required Features:
// 1. Display a table/list of 5 stocks showing:
//    - Stock symbol
//    - Current price (formatted as currency)
//    - Percentage change
//    - Color indicator (green for positive, red for negative)

// 2. Live updates:
//    - Every 3 seconds, randomly select one stock
//    - Update its price by Â±5% (random)
//    - Recalculate the percentage change

// 3. Search/Filter:
//    - Add a search input
//    - Filter the displayed stocks by symbol (case-insensitive)
//    - Show "No stocks found" if search returns no results

"use client";

import { useState, useEffect } from "react";

interface Stock {
  symbol: string;
  price: number;
  previousPrice: number;
  change: number;
}

const initialStocks: Stock[] = [
  { symbol: "AAPL", price: 1500, previousPrice: 1500, change: 0 },
  { symbol: "GOOG", price: 2800, previousPrice: 2800, change: 0 },
  { symbol: "AMZN", price: 3400, previousPrice: 3400, change: 0 },
  { symbol: "TSLA", price: 700, previousPrice: 700, change: 0 },
  { symbol: "MSFT", price: 300, previousPrice: 300, change: 0 },
];

export default function App() {
  const [stocks, setStocks] = useState<Stock[]>(initialStocks);
  const [query, setQuery] = useState("");

  useEffect(() => {
    let interval = setInterval(() => {
      setStocks((prevStocks) => {
        const i = Math.floor(Math.random() * prevStocks.length);
        const oldStock = prevStocks[i];
        const multiplier = Math.random() * 0.1 - 0.05 + 1;
        const rawNewPrice = oldStock.price * multiplier;

        const clamped = Math.max(0.1, rawNewPrice);
        const newPrice = Math.round(clamped * 100) / 100;

        const change = ((rawNewPrice - oldStock.price) / oldStock.price) * 100;

        const newStock = {
          ...oldStock,
          previousPrice: oldStock.price,
          price: newPrice,
          change,
        };

        const updatedStocks = prevStocks.map((stock, index) =>
          index === i ? newStock : stock
        );
        return updatedStocks;
      });
    }, 3000);
    return () => clearInterval(interval);
  }, []);

  const filtered = stocks.filter((s) =>
    s.symbol.toLowerCase().includes(query.toLowerCase())
  );

  return (
    <div className="flex flex-col mx-auto items-center justify-center min-h-screen">
      <input
        value={query}
        type="text"
        placeholder="search"
        onChange={(e) => setQuery(e.target.value)}
      />

      <table>
        <thead>
          <tr>
            <th>Symbol</th>
            <th>Price</th>
            <th>Change</th>
            <th>Status</th>
          </tr>
        </thead>
        <tbody>
          {filtered.length === 0 ? (
            <tr>
              <td colSpan={4} className="px-6 py-12 text-center text-gray-500">
                No stocks found matching "{query}"
              </td>
            </tr>
          ) : (
            filtered.map((stock) => (
              <tr key={stock.symbol}>
                <td>{stock.symbol}</td>
                <td>${stock.price}</td>
                <td>
                  {stock.change > 0 ? "+" : ""}
                  {stock.change.toFixed(2)}%
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <span
                    className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                      stock.change > 0
                        ? "bg-green-100 text-green-800"
                        : stock.change < 0
                        ? "bg-red-100 text-red-800"
                        : "bg-gray-100 text-gray-800"
                    }`}
                  >
                    {stock.change > 0 ? "â†—" : stock.change < 0 ? "â†˜" : "â†’"}
                  </span>
                </td>
              </tr>
            ))
          )}
        </tbody>
      </table>
    </div>
  );
}
// Mock Data Structure:
// {
//   symbol: string,      // e.g., "AAPL"
//   price: number,       // e.g., 150.25
//   change: number       // e.g., 2.5 (percentage change, can be negative)
// }

// Required Features:
// 1. Display a table/list of 5 stocks showing:
//    - Stock symbol
//    - Current price (formatted as currency)
//    - Percentage change
//    - Color indicator (green for positive, red for negative)

// 2. Live updates:
//    - Every 3 seconds, randomly select one stock
//    - Update its price by Â±5% (random)
//    - Recalculate the percentage change

// 3. Search/Filter:
//    - Add a search input
//    - Filter the displayed stocks by symbol (case-insensitive)
//    - Show "No stocks found" if search returns no results

"use client";

import { useState, useEffect } from "react";

interface Stock {
  symbol: string;
  price: number;
  previousPrice: number;
  change: number;
}

const initialStocks: Stock[] = [
  { symbol: "AAPL", price: 1500, previousPrice: 1500, change: 0 },
  { symbol: "GOOG", price: 2800, previousPrice: 2800, change: 0 },
  { symbol: "AMZN", price: 3400, previousPrice: 3400, change: 0 },
  { symbol: "TSLA", price: 700, previousPrice: 700, change: 0 },
  { symbol: "MSFT", price: 300, previousPrice: 300, change: 0 },
];

export default function App() {
  const [stocks, setStocks] = useState<Stock[]>(initialStocks);
  const [query, setQuery] = useState("");

  useEffect(() => {
    let interval = setInterval(() => {
      setStocks((prevStocks) => {
        const i = Math.floor(Math.random() * prevStocks.length);
        const oldStock = prevStocks[i];
        const multiplier = Math.random() * 0.1 - 0.05 + 1;
        const rawNewPrice = oldStock.price * multiplier;

        const clamped = Math.max(0.1, rawNewPrice);
        const newPrice = Math.round(clamped * 100) / 100;

        const change = ((rawNewPrice - oldStock.price) / oldStock.price) * 100;

        const newStock = {
          ...oldStock,
          previousPrice: oldStock.price,
          price: newPrice,
          change,
        };

        const updatedStocks = prevStocks.map((stock, index) =>
          index === i ? newStock : stock
        );
        return updatedStocks;
      });
    }, 3000);
    return () => clearInterval(interval);
  }, []);

  const filtered = stocks.filter((s) =>
    s.symbol.toLowerCase().includes(query.toLowerCase())
  );

  return (
    <div className="flex flex-col mx-auto items-center justify-center min-h-screen">
      <input
        value={query}
        type="text"
        placeholder="search"
        onChange={(e) => setQuery(e.target.value)}
      />

      <table>
        <thead>
          <tr>
            <th>Symbol</th>
            <th>Price</th>
            <th>Change</th>
            <th>Status</th>
          </tr>
        </thead>
        <tbody>
          {filtered.length === 0 ? (
            <tr>
              <td colSpan={4} className="px-6 py-12 text-center text-gray-500">
                No stocks found matching "{query}"
              </td>
            </tr>
          ) : (
            filtered.map((stock) => (
              <tr key={stock.symbol}>
                <td>{stock.symbol}</td>
                <td>${stock.price}</td>
                <td>
                  {stock.change > 0 ? "+" : ""}
                  {stock.change.toFixed(2)}%
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <span
                    className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                      stock.change > 0
                        ? "bg-green-100 text-green-800"
                        : stock.change < 0
                        ? "bg-red-100 text-red-800"
                        : "bg-gray-100 text-gray-800"
                    }`}
                  >
                    {stock.change > 0 ? "â†—" : stock.change < 0 ? "â†˜" : "â†’"}
                  </span>
                </td>
              </tr>
            ))
          )}
        </tbody>
      </table>
    </div>
  );
}
\n\n# ===== ./d-16/page.tsx =====\n
\n\n# ===== ./d-16/page.tsx =====\n
"use client";

import { useState, useEffect, useMemo } from "react";

interface Album {
  userId: number;
  id: number;
  title: string;
}

export default function App() {
  const [albums, setAlbums] = useState<Album[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [query, setQuery] = useState("");
  const [sortOrder, setSortOrder] = useState("");

  useEffect(() => {
    fetch("https://jsonplaceholder.typicode.com/albums")
      .then((res) => res.json())
      .then((albums) => setAlbums(albums))
      .catch((err) => setError(err.message))
      .finally(() => setLoading(false));
  }, []);

  const filteredAndSorted = useMemo(() => {
    let result = albums.filter((album) =>
      album.title.toLowerCase().includes(query.toLowerCase())
    );

    if (sortOrder == "asc") {
      result.sort((a, b) => a.title.localeCompare(b.title));
    } else if (sortOrder == "dec") {
      result.sort((a,b) => b.title.localeCompare(a.title));
    }

    return result;
  }, [albums, query, sortOrder]);

  return (
    <main className="flex min-h-screen flex-col items-center justify-center bg-gray-50">
      <div className="w-full max-w-7xl px-6 flex flex-col">
        <input
          value={query}
          type="text"
          placeholder="Filter your music!"
          onChange={(e) => setQuery(e.target.value)}
        />
        <label htmlFor="order">Choose Order</label>
        <select
          name="order"
          id="order"
          value={sortOrder}
          onChange={(e) => setSortOrder(e.target.value)}
        >
          <option value="asc">Sort Ascending</option>
          <option value="dec">Sort Descending</option>
        </select>
        {loading ? (
          <h1>Loading...</h1>
        ) : albums.length === 0 ? (
          <h1>Error is : {error}</h1>
        ) : (
          filteredAndSorted.map((t) => (
            <div key={t.id} className="flex flex-row gap-4">
              <h1>{t.userId}</h1>
              <h1> - </h1>
              <h1>{t.title}</h1>
            </div>
          ))
        )}
      </div>
    </main>
  );
}
"use client";

import { useState, useEffect, useMemo } from "react";

interface Album {
  userId: number;
  id: number;
  title: string;
}

export default function App() {
  const [albums, setAlbums] = useState<Album[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [query, setQuery] = useState("");
  const [sortOrder, setSortOrder] = useState("");

  useEffect(() => {
    fetch("https://jsonplaceholder.typicode.com/albums")
      .then((res) => res.json())
      .then((albums) => setAlbums(albums))
      .catch((err) => setError(err.message))
      .finally(() => setLoading(false));
  }, []);

  const filteredAndSorted = useMemo(() => {
    let result = albums.filter((album) =>
      album.title.toLowerCase().includes(query.toLowerCase())
    );

    if (sortOrder == "asc") {
      result.sort((a, b) => a.title.localeCompare(b.title));
    } else if (sortOrder == "dec") {
      result.sort((a,b) => b.title.localeCompare(a.title));
    }

    return result;
  }, [albums, query, sortOrder]);

  return (
    <main className="flex min-h-screen flex-col items-center justify-center bg-gray-50">
      <div className="w-full max-w-7xl px-6 flex flex-col">
        <input
          value={query}
          type="text"
          placeholder="Filter your music!"
          onChange={(e) => setQuery(e.target.value)}
        />
        <label htmlFor="order">Choose Order</label>
        <select
          name="order"
          id="order"
          value={sortOrder}
          onChange={(e) => setSortOrder(e.target.value)}
        >
          <option value="asc">Sort Ascending</option>
          <option value="dec">Sort Descending</option>
        </select>
        {loading ? (
          <h1>Loading...</h1>
        ) : albums.length === 0 ? (
          <h1>Error is : {error}</h1>
        ) : (
          filteredAndSorted.map((t) => (
            <div key={t.id} className="flex flex-row gap-4">
              <h1>{t.userId}</h1>
              <h1> - </h1>
              <h1>{t.title}</h1>
            </div>
          ))
        )}
      </div>
    </main>
  );
}
\n\n# ===== ./d-11/frontend/page.tsx =====\n
\n\n# ===== ./d-11/frontend/page.tsx =====\n
"use client";
import { useState, useEffect } from "react";

const API = "http://localhost:5001";

interface Coin {
  id: string; // <-- UUID is a string, not number
  name: string;
  symbol: string;
  price: number;
}

export default function App() {
  const [coins, setCoins] = useState<Coin[]>([]);
  const [err, setErr] = useState<string>("");
  const [name, setName] = useState("");
  const [symbol, setSymbol] = useState("");
  const [query, setQuery] = useState("");
  const [price, setPrice] = useState<number | "">("");

  // Load all coins
  useEffect(() => {
    (async () => {
      try {
        const res = await fetch(`${API}/coins`);
        if (!res.ok) throw new Error(`GET /coins failed: ${res.status}`);
        const data: Coin[] = await res.json();
        setCoins(data);
      } catch (e: any) {
        setErr(e?.message ?? "Failed to fetch coins");
      }
    })();
  }, []);

  // Add a coin
  async function handleAdd() {
    setErr("");
    try {
      // simple validation
      const trimmedName = name.trim();
      const trimmedSymbol = symbol.trim().toUpperCase();
      const numericPrice = typeof price === "string" ? Number(price) : price;

      if (!trimmedName || !trimmedSymbol || isNaN(numericPrice)) {
        setErr("Please provide name, symbol, and a valid price.");
        return;
      }

      const res = await fetch(`${API}/coins`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          name: trimmedName,
          symbol: trimmedSymbol,
          price: numericPrice,
        }),
      });
      if (!res.ok) throw new Error(`POST /coins failed: ${res.status}`);
      const newCoin: Coin = await res.json();
      setCoins((prev) => [...prev, newCoin]);

      // clear form
      setName("");
      setSymbol("");
      setPrice("");
    } catch (e: any) {
      setErr(e?.message ?? "Failed to add coin");
    }
  }

  // Delete a coin
  async function handleDelete(id: string) {
    setErr("");
    try {
      const res = await fetch(`${API}/coins/${id}`, {
        method: "DELETE",
      });
      if (!res.ok) throw new Error(`DELETE /coins/${id} failed: ${res.status}`);
      // optimistic update
      setCoins((prev) => prev.filter((c) => c.id !== id));
    } catch (e: any) {
      setErr(e?.message ?? "Failed to delete coin");
    }
  }

  const filtered = coins.filter((c) => c.name.toLowerCase().includes(query));

  return (
    <main className="flex min-h-screen items-center justify-center bg-gray-50">
      <div className="flex flex-col gap-4 p-6 rounded w-full max-w-2xl">
        <h1 className="text-xl font-semibold">Add a coin</h1>

        {err && (
          <div className="text-red-600 text-sm border border-red-200 rounded p-2">
            {err}
          </div>
        )}

        <div className="flex flex-wrap gap-3">
          <input
            type="text"
            placeholder="Bitcoin" // name
            value={name}
            onChange={(e) => setName(e.target.value)}
            className="border rounded px-2 py-1"
          />
          <input
            type="text"
            placeholder="BTC" // symbol
            value={symbol}
            onChange={(e) => setSymbol(e.target.value)}
            className="border rounded px-2 py-1"
          />
          <input
            type="number"
            placeholder="$123"
            value={price}
            onChange={(e) => {
              const v = e.target.value;
              setPrice(v === "" ? "" : Number(v));
            }}
            className="border rounded px-2 py-1"
          />
          <button
            onClick={handleAdd}
            className="rounded px-3 py-1 border"
            disabled={
              !name.trim() ||
              !symbol.trim() ||
              price === "" ||
              isNaN(Number(price))
            }
          >
            submit
          </button>
        </div>
        <div className="flex flex-row justify-between">
          <h2 className="text-lg font-medium mt-4">Coins</h2>
          <input
   "use client";
import { useState, useEffect } from "react";

const API = "http://localhost:5001";

interface Coin {
  id: string; // <-- UUID is a string, not number
  name: string;
  symbol: string;
  price: number;
}

export default function App() {
  const [coins, setCoins] = useState<Coin[]>([]);
  const [err, setErr] = useState<string>("");
  const [name, setName] = useState("");
  const [symbol, setSymbol] = useState("");
  const [query, setQuery] = useState("");
  const [price, setPrice] = useState<number | "">("");

  // Load all coins
  useEffect(() => {
    (async () => {
      try {
        const res = await fetch(`${API}/coins`);
        if (!res.ok) throw new Error(`GET /coins failed: ${res.status}`);
        const data: Coin[] = await res.json();
        setCoins(data);
      } catch (e: any) {
        setErr(e?.message ?? "Failed to fetch coins");
      }
    })();
  }, []);

  // Add a coin
  async function handleAdd() {
    setErr("");
    try {
      // simple validation
      const trimmedName = name.trim();
      const trimmedSymbol = symbol.trim().toUpperCase();
      const numericPrice = typeof price === "string" ? Number(price) : price;

      if (!trimmedName || !trimmedSymbol || isNaN(numericPrice)) {
        setErr("Please provide name, symbol, and a valid price.");
        return;
      }

      const res = await fetch(`${API}/coins`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          name: trimmedName,
          symbol: trimmedSymbol,
          price: numericPrice,
        }),
      });
      if (!res.ok) throw new Error(`POST /coins failed: ${res.status}`);
      const newCoin: Coin = await res.json();
      setCoins((prev) => [...prev, newCoin]);

      // clear form
      setName("");
      setSymbol("");
      setPrice("");
    } catch (e: any) {
      setErr(e?.message ?? "Failed to add coin");
    }
  }

  // Delete a coin
  async function handleDelete(id: string) {
    setErr("");
    try {
      const res = await fetch(`${API}/coins/${id}`, {
        method: "DELETE",
      });
      if (!res.ok) throw new Error(`DELETE /coins/${id} failed: ${res.status}`);
      // optimistic update
      setCoins((prev) => prev.filter((c) => c.id !== id));
    } catch (e: any) {
      setErr(e?.message ?? "Failed to delete coin");
    }
  }

  const filtered = coins.filter((c) => c.name.toLowerCase().includes(query));

  return (
    <main className="flex min-h-screen items-center justify-center bg-gray-50">
      <div className="flex flex-col gap-4 p-6 rounded w-full max-w-2xl">
        <h1 className="text-xl font-semibold">Add a coin</h1>

        {err && (
          <div className="text-red-600 text-sm border border-red-200 rounded p-2">
            {err}
          </div>
        )}

        <div className="flex flex-wrap gap-3">
          <input
            type="text"
            placeholder="Bitcoin" // name
            value={name}
            onChange={(e) => setName(e.target.value)}
            className="border rounded px-2 py-1"
          />
          <input
            type="text"
            placeholder="BTC" // symbol
            value={symbol}
            onChange={(e) => setSymbol(e.target.value)}
            className="border rounded px-2 py-1"
          />
          <input
            type="number"
            placeholder="$123"
            value={price}
            onChange={(e) => {
              const v = e.target.value;
              setPrice(v === "" ? "" : Number(v));
            }}
            className="border rounded px-2 py-1"
          />
          <button
            onClick={handleAdd}
            className="rounded px-3 py-1 border"
            disabled={
              !name.trim() ||
              !symbol.trim() ||
              price === "" ||
              isNaN(Number(price))
            }
          >
            submit
          </button>
        </div>
        <div className="flex flex-row justify-between">
          <h2 className="text-lg font-medium mt-4">Coins</h2>
          <input
            type="text"
            placeholder="query"
            value={query}
            onChange={(e) => setQuery(e.target.value)}
            className="border rounded px-2 py-1"
          />
        </div>

        {coins.length > 0 ? (
          <ul className="space-y-2">
            {filtered.map((c) => (
              <li
                key={c.id}
                className="flex items-center gap-4 border rounded px-3 py-2"
              >
                <span className="w-40">{c.name}</span>
                <span className="w-24 font-mono">{c.symbol}</span>
                <span className="w-24">${c.price}</span>
                <button
                  onClick={() => handleDelete(c.id)}
                  className="ml-auto text-red-600"
                  aria-label={`Delete ${c.name}`}
                >
                  âœ–
                </button>
              </li>
            ))}
          </ul>
        ) : (
          <p>empty list.</p>
        )}
      </div>
    </main>
  );
}
         type="text"
            placeholder="query"
            value={query}
            onChange={(e) => setQuery(e.target.value)}
            className="border rounded px-2 py-1"
          />
        </div>

        {coins.length > 0 ? (
          <ul className="space-y-2">
            {filtered.map((c) => (
              <li
                key={c.id}
                className="flex items-center gap-4 border rounded px-3 py-2"
              >
                <span className="w-40">{c.name}</span>
                <span className="w-24 font-mono">{c.symbol}</span>
                <span className="w-24">${c.price}</span>
                <button
                  onClick={() => handleDelete(c.id)}
                  className="ml-auto text-red-600"
                  aria-label={`Delete ${c.name}`}
                >
                  âœ–
                </button>
              </li>
            ))}
          </ul>
        ) : (
          <p>empty list.</p>
        )}
      </div>
    </main>
  );
}
\n\n# ===== ./d-11/backend/main.py =====\n
\n\n# ===== ./d-11/backend/main.py =====\n
from flask import Flask, jsonify, request
from flask_cors import CORS
import uuid

app = Flask(__name__)
CORS(app)

COINS = []

@app.route("/coins", methods=["GET"])
def getCoins():
    return jsonify(COINS), 200

@app.route("/coins", methods=["POST"])
def addCoin():
    data = request.get_json()
    name = data.get("name", "").strip()
    symbol = data.get("symbol", "").strip()
    price = float(data.get("price", 0))

    if not name:
        return jsonify({"error": "text required."}), 400
    
    new_coin = {
        "id": str(uuid.uuid4()),
        "name": name,
        "symbol": symbol,
        "price": price
    }

    COINS.append(new_coin)
    return jsonify(new_coin), 201

@app.route("/coins/<string:id>", methods=["DELETE"])
def removeCoin(id):
    global COINS
    COINS = [c for c in COINS if c["id"] != id]
    return jsonify({"message": f"Coin {id} deleted"}), 200

if __name__ == "__main__":
    app.run(debug=True, host="0.0.0.0", port=5001)
from flask import Flask, jsonify, request
from flask_cors import CORS
import uuid

app = Flask(__name__)
CORS(app)

COINS = []

@app.route("/coins", methods=["GET"])
def getCoins():
    return jsonify(COINS), 200

@app.route("/coins", methods=["POST"])
def addCoin():
    data = request.get_json()
    name = data.get("name", "").strip()
    symbol = data.get("symbol", "").strip()
    price = float(data.get("price", 0))

    if not name:
        return jsonify({"error": "text required."}), 400
    
    new_coin = {
        "id": str(uuid.uuid4()),
        "name": name,
        "symbol": symbol,
        "price": price
    }

    COINS.append(new_coin)
    return jsonify(new_coin), 201

@app.route("/coins/<string:id>", methods=["DELETE"])
def removeCoin(id):
    global COINS
    COINS = [c for c in COINS if c["id"] != id]
    return jsonify({"message": f"Coin {id} deleted"}), 200

if __name__ == "__main__":
    app.run(debug=True, host="0.0.0.0", port=5001)
\n\n# ===== ./d-18/main.py =====\n
\n\n# ===== ./d-18/main.py =====\n
import math

trades = [
    {"symbol": "AAPL", "side": "BUY", "price": 150, "quantity": 10},
    {"symbol": "AAPL", "side": "SELL", "price": 152, "quantity": 5},
    {"symbol": "TSLA", "side": "BUY", "price": 240, "quantity": 7},
]

symbol = "AAPL"
total = 0
filtered = []
grouped = {}

sorted_trades = sorted(trades, key=lambda t: t["price"], reverse=True)

for t in trades:
  side = t["side"]
  grouped.setdefault(side, []).append(t)
  if t["symbol"] == symbol:
    filtered.append(t)
  
print("Problem 1")
print(filtered)

print ("Problem 2")  
print(total)

print("Problem 3")
print(math.floor(total / len(trades)))

print("Problem 4")
print(grouped)

print("Problem 5")
print(sorted_trades)import math

trades = [
    {"symbol": "AAPL", "side": "BUY", "price": 150, "quantity": 10},
    {"symbol": "AAPL", "side": "SELL", "price": 152, "quantity": 5},
    {"symbol": "TSLA", "side": "BUY", "price": 240, "quantity": 7},
]

symbol = "AAPL"
total = 0
filtered = []
grouped = {}

sorted_trades = sorted(trades, key=lambda t: t["price"], reverse=True)

for t in trades:
  side = t["side"]
  grouped.setdefault(side, []).append(t)
  if t["symbol"] == symbol:
    filtered.append(t)
  
print("Problem 1")
print(filtered)

print ("Problem 2")  
print(total)

print("Problem 3")
print(math.floor(total / len(trades)))

print("Problem 4")
print(grouped)

print("Problem 5")
print(sorted_trades)\n\n# ===== ./d-20/main.py =====\n
\n\n# ===== ./d-20/main.py =====\n
trades = [
    {"id": 1, "symbol": "AAPL", "side": "BUY", "price": 150, "quantity": 50},
    {"id": 2, "symbol": "AAPL", "side": "SELL", "price": 152, "quantity": 20},
    {"id": 3, "symbol": "TSLA", "side": "BUY", "price": 240, "quantity": 150},
    {"id": 4, "symbol": "MSFT", "side": "BUY", "price": 380, "quantity": 80},
    {"id": 5, "symbol": "TSLA", "side": "SELL", "price": 245, "quantity": 120},
    {"id": 6, "symbol": "AAPL", "side": "BUY", "price": 151, "quantity": 70},
]

trades_part1 = {
    1: {"symbol": "AAPL", "price": 150},
    3: {"symbol": "TSLA", "price": 240},
}

trades_part2 = {
    2: {"symbol": "MSFT", "price": 380},
    4: {"symbol": "TSLA", "price": 245},
}


freq_table = {}
inverted_freq_table = {}
for t in trades:
  symbol = t["symbol"]
  price = t["price"]
  freq_table[symbol] = freq_table.get(symbol, 0) + 1
  inverted_freq_table.setdefault(price, []).append(t["id"])

trades_all = trades_part1.copy()
trades_all.update(trades_part2) 

items = list(trades_all.items())

def sort_key(item):
  return item[1]["symbol"]

sorted_items = sorted(items, key=sort_key)

for pair in sorted_items:
  trade_id = pair[0]
  data = pair[1]
  print(trade_id, data)

print("Problem 1")
print(freq_table)

print("Problem 2")
print(inverted_freq_table)

print("Problem 3")
print(trades_all)

print(items)trades = [
    {"id": 1, "symbol": "AAPL", "side": "BUY", "price": 150, "quantity": 50},
    {"id": 2, "symbol": "AAPL", "side": "SELL", "price": 152, "quantity": 20},
    {"id": 3, "symbol": "TSLA", "side": "BUY", "price": 240, "quantity": 150},
    {"id": 4, "symbol": "MSFT", "side": "BUY", "price": 380, "quantity": 80},
    {"id": 5, "symbol": "TSLA", "side": "SELL", "price": 245, "quantity": 120},
    {"id": 6, "symbol": "AAPL", "side": "BUY", "price": 151, "quantity": 70},
]

trades_part1 = {
    1: {"symbol": "AAPL", "price": 150},
    3: {"symbol": "TSLA", "price": 240},
}

trades_part2 = {
    2: {"symbol": "MSFT", "price": 380},
    4: {"symbol": "TSLA", "price": 245},
}


freq_table = {}
inverted_freq_table = {}
for t in trades:
  symbol = t["symbol"]
  price = t["price"]
  freq_table[symbol] = freq_table.get(symbol, 0) + 1
  inverted_freq_table.setdefault(price, []).append(t["id"])

trades_all = trades_part1.copy()
trades_all.update(trades_part2) 

items = list(trades_all.items())

def sort_key(item):
  return item[1]["symbol"]

sorted_items = sorted(items, key=sort_key)

for pair in sorted_items:
  trade_id = pair[0]
  data = pair[1]
  print(trade_id, data)

print("Problem 1")
print(freq_table)

print("Problem 2")
print(inverted_freq_table)

print("Problem 3")
print(trades_all)

print(items)\n\n# ===== ./d-22/main.py =====\n
\n\n# ===== ./d-22/main.py =====\n
trades = [
    {"id": 1, "symbol": "AAPL", "price": "150.5", "quantity": 50},
    {"id": 2, "symbol": "TSLA", "price": "bad_data", "quantity": 20},  # invalid price
    {"id": 3, "symbol": "MSFT", "quantity": 80},                       # missing price
    {"id": 4, "symbol": "NVDA", "price": "900.0", "quantity": None},   # invalid quantity
]

for t in trades:
  try:
    price = float(t["price"])
    quantity = t["quantity"]
    total = price * quantity
    print(f"Trade {t['id']} total value: {total}")
  except KeyError as e:
    print(f"Missing field {e} in trade {t['id']}")
  except ValueError:
    print(f"Invalid price format in trade {t['id']}")
  except TypeError:
    print(f"Invalid quantity type in trade {t['id']}")
  finally:
    print("Done processing trade\n")
trades = [
    {"id": 1, "symbol": "AAPL", "price": "150.5", "quantity": 50},
    {"id": 2, "symbol": "TSLA", "price": "bad_data", "quantity": 20},  # invalid price
    {"id": 3, "symbol": "MSFT", "quantity": 80},                       # missing price
    {"id": 4, "symbol": "NVDA", "price": "900.0", "quantity": None},   # invalid quantity
]

for t in trades:
  try:
    price = float(t["price"])
    quantity = t["quantity"]
    total = price * quantity
    print(f"Trade {t['id']} total value: {total}")
  except KeyError as e:
    print(f"Missing field {e} in trade {t['id']}")
  except ValueError:
    print(f"Invalid price format in trade {t['id']}")
  except TypeError:
    print(f"Invalid quantity type in trade {t['id']}")
  finally:
    print("Done processing trade\n")
\n\n# ===== ./d-14/page.tsx =====\n
\n\n# ===== ./d-14/page.tsx =====\n
"use client";

import { useState, useEffect } from "react";

interface User {
  id: number;
  name: string;
  username: string;
  email: string;
  address: {
    street: string;
  };
}

export default function App() {
  const [users, setUsers] = useState<User[]>([]);
  const [err, setError] = useState("");
  const [input, setInput] = useState("");
  useEffect(() => {
    fetch("https://jsonplaceholder.typicode.com/users")
      .then((res) => res.json())
      .then((data) => setUsers(data))
      .catch((err) => setError(err));
  }, []);

  const filtered = users.filter((s) => s.name.toLowerCase().includes(input))

  return (
    <main className="flex min-h-screen flex-col items-center justify-center bg-gray-50">
      <div className="w-full max-w-7xl px-6 flex flex-col">
        <input
          type="text"
          placeholder="filter by name"
          value={input}
          onChange={(e) => setInput(e.target.value)}
        />
        {filtered.length === 0 ? (
          <h1>{err || 'no names match' + input}</h1>
        ) : (
          filtered.map((t) => (
            <div className="flex flex-col" key={t.id}>
              <h1>Name: {t.name}</h1>
              <h1>Username: {t.username}</h1>
              <h1>Email: {t.email}</h1>
              <h1>Address: {t.address.street}</h1>
            </div>
          ))
        )}
      </div>
    </main>
  );
}
"use client";

import { useState, useEffect } from "react";

interface User {
  id: number;
  name: string;
  username: string;
  email: string;
  address: {
    street: string;
  };
}

export default function App() {
  const [users, setUsers] = useState<User[]>([]);
  const [err, setError] = useState("");
  const [input, setInput] = useState("");
  useEffect(() => {
    fetch("https://jsonplaceholder.typicode.com/users")
      .then((res) => res.json())
      .then((data) => setUsers(data))
      .catch((err) => setError(err));
  }, []);

  const filtered = users.filter((s) => s.name.toLowerCase().includes(input))

  return (
    <main className="flex min-h-screen flex-col items-center justify-center bg-gray-50">
      <div className="w-full max-w-7xl px-6 flex flex-col">
        <input
          type="text"
          placeholder="filter by name"
          value={input}
          onChange={(e) => setInput(e.target.value)}
        />
        {filtered.length === 0 ? (
          <h1>{err || 'no names match' + input}</h1>
        ) : (
          filtered.map((t) => (
            <div className="flex flex-col" key={t.id}>
              <h1>Name: {t.name}</h1>
              <h1>Username: {t.username}</h1>
              <h1>Email: {t.email}</h1>
              <h1>Address: {t.address.street}</h1>
            </div>
          ))
        )}
      </div>
    </main>
  );
}
\n\n# ===== ./d-13/page.tsx =====\n
\n\n# ===== ./d-13/page.tsx =====\n
"use client";

import { useState, useEffect } from "react";

interface Stock {
  id: number;
  symbol: string;
  price: number;
  prevPrice: number;
  isPinned: Boolean;
  rate: number;
}

const initialStocks = [
  {
    id: 1,
    symbol: "AAPL",
    price: 150.25,
    prevPrice: 0,
    isPinned: false,
    rate: 0,
  },
  {
    id: 2,
    symbol: "TSLA",
    price: 242.5,
    prevPrice: 0,
    isPinned: false,
    rate: 0,
  },
  {
    id: 3,
    symbol: "MSFT",
    price: 380.75,
    prevPrice: 0,
    isPinned: false,
    rate: 0,
  },
  {
    id: 4,
    symbol: "GOOGL",
    price: 140.2,
    prevPrice: 0,
    isPinned: false,
    rate: 0,
  },
  {
    id: 5,
    symbol: "AMZN",
    price: 178.35,
    prevPrice: 0,
    isPinned: false,
    rate: 0,
  },
  {
    id: 6,
    symbol: "NVDA",
    price: 495.5,
    prevPrice: 0,
    isPinned: false,
    rate: 0,
  },
];

export default function App() {
  const [stock, setStocks] = useState<Stock[]>(initialStocks);

  useEffect(() => {
    let interval = setInterval(() => {
      setStocks((prevStocks) => {
        // im unsure how to select '2-3 stocks', but i know how to randomly select one. we can go with that for now.
        let idx = Math.floor(Math.random() * prevStocks.length);

        const changePercent =
          (Math.random() * (0.03 - 0.005) + 0.005) *
          (Math.random() < 0.5 ? -1 : 1);

        let prev = prevStocks[idx].price;
        // now we have to apply logic.
        // ran multiplier between 1.005 and 1.03
        let multiplier = 1 + changePercent;
        let newPrice = Math.round(prev * multiplier * 100) / 100;
        // well hold on. this will always increment.
        let determineRate = newPrice - prev;
        let newStock = {
          ...prevStocks[idx],
          price: newPrice,
          prevPrice: prev,
          rate: determineRate,
        };
        return prevStocks.map((stock, index) =>
          index === idx ? newStock : stock
        );
      });
    }, 20); // 2 seconds.
    return () => clearInterval(interval);
  }, []);

  return (
    <main className="flex min-h-screen flex-col items-center justify-center bg-gray-50">
      <div className="w-full max-w-7xl px-6 flex flex-col">
        <div className="flex flex-row gap-12">
          {stock.map((t) => (
            <button
              className={`border p-4 rounded-lg flex flex-col cursor-pointer ${
                t.rate > 0
                  ? "text-green-500 bg-green-50"
                  : t.rate < 0
                  ? "text-red-500 bg-red-50"
                  : "text-gray-500 bg-gray-50"
              }`}
              key={t.id}
            >
              {" "}
              {t.symbol}
              <p>{t.price}</p>
            </button>
          ))}
        </div>
      </div>
    </main>
  );
}

// Problem Statement: Real-Time Price Ticker
// You're building a live price display that traders use to monitor stocks.
// Requirements:
// Build a React + TypeScript component that:

// Displays a grid of stock cards (not a table) showing:

// Symbol
// Current price
// Price change from previous update (as $ amount and %)
// Visual indicator: green if price went up, red if down, gray if unchanged

// Simulates real-time price updates:

// Every 2 seconds, randomly select 2-3 stocks and update their prices
// Price changes should be realistic: Â±0.5% to Â±3% of current price
// When a price updates, briefly highlight the card (flash animation)

// Add interactivity:

// Clicking a stock card should "pin" it (toggle a pinned state)
// Pinned stocks should appear at the top of the grid with a pin icon
// Pinned stocks should have a different background color

// for the live change, we have to pas
"use client";

import { useState, useEffect } from "react";

interface Stock {
  id: number;
  symbol: string;
  price: number;
  prevPrice: number;
  isPinned: Boolean;
  rate: number;
}

const initialStocks = [
  {
    id: 1,
    symbol: "AAPL",
    price: 150.25,
    prevPrice: 0,
    isPinned: false,
    rate: 0,
  },
  {
    id: 2,
    symbol: "TSLA",
    price: 242.5,
    prevPrice: 0,
    isPinned: false,
    rate: 0,
  },
  {
    id: 3,
    symbol: "MSFT",
    price: 380.75,
    prevPrice: 0,
    isPinned: false,
    rate: 0,
  },
  {
    id: 4,
    symbol: "GOOGL",
    price: 140.2,
    prevPrice: 0,
    isPinned: false,
    rate: 0,
  },
  {
    id: 5,
    symbol: "AMZN",
    price: 178.35,
    prevPrice: 0,
    isPinned: false,
    rate: 0,
  },
  {
    id: 6,
    symbol: "NVDA",
    price: 495.5,
    prevPrice: 0,
    isPinned: false,
    rate: 0,
  },
];

export default function App() {
  const [stock, setStocks] = useState<Stock[]>(initialStocks);

  useEffect(() => {
    let interval = setInterval(() => {
      setStocks((prevStocks) => {
        // im unsure how to select '2-3 stocks', but i know how to randomly select one. we can go with that for now.
        let idx = Math.floor(Math.random() * prevStocks.length);

        const changePercent =
          (Math.random() * (0.03 - 0.005) + 0.005) *
          (Math.random() < 0.5 ? -1 : 1);

        let prev = prevStocks[idx].price;
        // now we have to apply logic.
        // ran multiplier between 1.005 and 1.03
        let multiplier = 1 + changePercent;
        let newPrice = Math.round(prev * multiplier * 100) / 100;
        // well hold on. this will always increment.
        let determineRate = newPrice - prev;
        let newStock = {
          ...prevStocks[idx],
          price: newPrice,
          prevPrice: prev,
          rate: determineRate,
        };
        return prevStocks.map((stock, index) =>
          index === idx ? newStock : stock
        );
      });
    }, 20); // 2 seconds.
    return () => clearInterval(interval);
  }, []);

  return (
    <main className="flex min-h-screen flex-col items-center justify-center bg-gray-50">
      <div className="w-full max-w-7xl px-6 flex flex-col">
        <div className="flex flex-row gap-12">
          {stock.map((t) => (
            <button
              className={`border p-4 rounded-lg flex flex-col cursor-pointer ${
                t.rate > 0
                  ? "text-green-500 bg-green-50"
                  : t.rate < 0
                  ? "text-red-500 bg-red-50"
                  : "text-gray-500 bg-gray-50"
              }`}
              key={t.id}
            >
              {" "}
              {t.symbol}
              <p>{t.price}</p>
            </button>
          ))}
        </div>
      </div>
    </main>
  );
}

// Problem Statement: Real-Time Price Ticker
// You're building a live price display that traders use to monitor stocks.
// Requirements:
// Build a React + TypeScript component that:

// Displays a grid of stock cards (not a table) showing:

// Symbol
// Current price
// Price change from previous update (as $ amount and %)
// Visual indicator: green if price went up, red if down, gray if unchanged

// Simulates real-time price updates:

// Every 2 seconds, randomly select 2-3 stocks and update their prices
// Price changes should be realistic: Â±0.5% to Â±3% of current price
// When a price updates, briefly highlight the card (flash animation)

// Add interactivity:

// Clicking a stock card should "pin" it (toggle a pinned state)
// Pinned stocks should appear at the top of the grid with a pin icon
// Pinned stocks should have a different background color

// for the live change, we have to pas
\n\n# ===== ./d-1/page.tsx =====\n
\n\n# ===== ./d-1/page.tsx =====\n
// Build a stock watchlist component where users can:
// - Add a stock symbol to their watchlist (input + button)
// - See a list of all added symbols
// - Remove symbols from the list (delete button)
// - Show a message if the list is empty
// Use TypeScript for all props and state.

"use client";

import { useState } from "react";

interface Stock {
  id: number;
  text: string;
}

export default function App() {
  const [input, setInput] = useState("");
  const [stocks, setStocks] = useState<Stock[]>([]);

  const handleAdd = () => {
    if (!input.trim()) return;
    setStocks([...stocks, { id: Date.now(), text: input }]);
    setInput("");
  };

  const handleDelete = (id: number) => {
    setStocks(stocks.filter((stock) => stock.id !== id));
  };

  return (
    <div className="flex flex-col mx-auto items-center justify-center min-h-screen">
      <div className="flex flex-row gap-3">
        <input
          value={input}
          onChange={(e) => setInput(e.target.value)}
          placeholder="stock"
        />
        <button onClick={handleAdd}>add</button>
      </div>
      {stocks.length > 0 ? (
        stocks.map((stock) => <div key={stock.id}>{stock.text} <button onClick={() => handleDelete(stock.id)}>âœ—</button></div>)
      ) : (
        <h1>no stocks have been added yet.</h1>
      )}
    </div>
  );
}
// Build a stock watchlist component where users can:
// - Add a stock symbol to their watchlist (input + button)
// - See a list of all added symbols
// - Remove symbols from the list (delete button)
// - Show a message if the list is empty
// Use TypeScript for all props and state.

"use client";

import { useState } from "react";

interface Stock {
  id: number;
  text: string;
}

export default function App() {
  const [input, setInput] = useState("");
  const [stocks, setStocks] = useState<Stock[]>([]);

  const handleAdd = () => {
    if (!input.trim()) return;
    setStocks([...stocks, { id: Date.now(), text: input }]);
    setInput("");
  };

  const handleDelete = (id: number) => {
    setStocks(stocks.filter((stock) => stock.id !== id));
  };

  return (
    <div className="flex flex-col mx-auto items-center justify-center min-h-screen">
      <div className="flex flex-row gap-3">
        <input
          value={input}
          onChange={(e) => setInput(e.target.value)}
          placeholder="stock"
        />
        <button onClick={handleAdd}>add</button>
      </div>
      {stocks.length > 0 ? (
        stocks.map((stock) => <div key={stock.id}>{stock.text} <button onClick={() => handleDelete(stock.id)}>âœ—</button></div>)
      ) : (
        <h1>no stocks have been added yet.</h1>
      )}
    </div>
  );
}
\n\n# ===== ./d-6/page.tsx =====\n
\n\n# ===== ./d-6/page.tsx =====\n
"use client";
import { useEffect, useState } from "react";

interface Order {
  id: string;
  type: string;
  symbol: string;
  price: number;
  quantity: number;
}

function generateRandomOrder(): Order {
  const symbols = ["BTC", "ETH", "SOL", "ADA", "DOGE"];
  const types: Array<"buy" | "sell"> = ["buy", "sell"];

  const randomSymbol = symbols[Math.floor(Math.random() * symbols.length)];
  const randomType = types[Math.floor(Math.random() * types.length)];
  const randomPrice = Math.floor(Math.random() * 500) + 1;
  const randomQuantity = Math.floor(Math.random() * 20) + 1;

  return {
    id: crypto.randomUUID(),
    type: randomType,
    symbol: randomSymbol,
    price: randomPrice,
    quantity: randomQuantity,
  };
}

export default function App() {
  const [orders, setOrders] = useState<Order[]>([]);
  const [lastUpdatedId, setLastUpdatedId] = useState("");
  const generateInitialOrders = () => {
    const orders = Array.from({ length: 10 }, generateRandomOrder);
    setOrders(orders);
  };

  const handleAddOrder = () => {
    setOrders((prev) => [...prev, generateRandomOrder()]);
  };

  const handleRemoveOrder = (id: string) => {
    setOrders(orders.filter((x) => x.id !== id));
  };

  useEffect(() => {
    generateInitialOrders();

    const interval = setInterval(() => {
      setOrders((prev) => {
        if (prev.length === 0) return prev;

        // work on a shallow copy
        const updated = [...prev];

        // 1) modify ONE random order (price or quantity)
        const idx = Math.floor(Math.random() * updated.length);
        const curr = updated[idx];
        setLastUpdatedId(curr.id);
        const multiplier = Math.random() * 0.15 + 1; // [1, 1.15)
        const modifyPrice = Math.random() < 0.5;

        const changed: Order = modifyPrice
          ? { ...curr, price: curr.price * multiplier }
          : { ...curr, quantity: curr.quantity * multiplier };

        updated[idx] = changed;

        // 2) maybe remove ONE
        // ~10% chance to remove, but NEVER if it would drop to zero (optional)
        if (Math.random() < 0.1 && updated.length > 1) {
          const removeIdx = Math.floor(Math.random() * updated.length);
          updated.splice(removeIdx, 1);
        }

        // 3) maybe add ONE (~15% chance)
        if (Math.random() < 0.15) {
          updated.push(generateRandomOrder()); // use your helper; no extra setState
        }

        return updated;
      });
    }, 2000);

    return () => clearInterval(interval);
  }, []);

  return (
    <div className="flex flex-col mx-auto items-center justify-center min-h-screen">
      <table>
        <thead>
          <tr>
            <th>type </th>
            <th>symbol</th>
            <th>price </th>
            <th>quantity </th>
          </tr>
        </thead>
        <tbody>
          {orders.map((o) => (
            <tr key={o.id} className = {`rounded-4xl ${o.id === lastUpdatedId ? 'bg-yellow-100' : 'bg-white'}`}>
              <td>{o.type}</td>
              <td>{o.symbol}</td>
              <td>{o.price}</td>
              <td>{o.quantity}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}
"use client";
import { useEffect, useState } from "react";

interface Order {
  id: string;
  type: string;
  symbol: string;
  price: number;
  quantity: number;
}

function generateRandomOrder(): Order {
  const symbols = ["BTC", "ETH", "SOL", "ADA", "DOGE"];
  const types: Array<"buy" | "sell"> = ["buy", "sell"];

  const randomSymbol = symbols[Math.floor(Math.random() * symbols.length)];
  const randomType = types[Math.floor(Math.random() * types.length)];
  const randomPrice = Math.floor(Math.random() * 500) + 1;
  const randomQuantity = Math.floor(Math.random() * 20) + 1;

  return {
    id: crypto.randomUUID(),
    type: randomType,
    symbol: randomSymbol,
    price: randomPrice,
    quantity: randomQuantity,
  };
}

export default function App() {
  const [orders, setOrders] = useState<Order[]>([]);
  const [lastUpdatedId, setLastUpdatedId] = useState("");
  const generateInitialOrders = () => {
    const orders = Array.from({ length: 10 }, generateRandomOrder);
    setOrders(orders);
  };

  const handleAddOrder = () => {
    setOrders((prev) => [...prev, generateRandomOrder()]);
  };

  const handleRemoveOrder = (id: string) => {
    setOrders(orders.filter((x) => x.id !== id));
  };

  useEffect(() => {
    generateInitialOrders();

    const interval = setInterval(() => {
      setOrders((prev) => {
        if (prev.length === 0) return prev;

        // work on a shallow copy
        const updated = [...prev];

        // 1) modify ONE random order (price or quantity)
        const idx = Math.floor(Math.random() * updated.length);
        const curr = updated[idx];
        setLastUpdatedId(curr.id);
        const multiplier = Math.random() * 0.15 + 1; // [1, 1.15)
        const modifyPrice = Math.random() < 0.5;

        const changed: Order = modifyPrice
          ? { ...curr, price: curr.price * multiplier }
          : { ...curr, quantity: curr.quantity * multiplier };

        updated[idx] = changed;

        // 2) maybe remove ONE
        // ~10% chance to remove, but NEVER if it would drop to zero (optional)
        if (Math.random() < 0.1 && updated.length > 1) {
          const removeIdx = Math.floor(Math.random() * updated.length);
          updated.splice(removeIdx, 1);
        }

        // 3) maybe add ONE (~15% chance)
        if (Math.random() < 0.15) {
          updated.push(generateRandomOrder()); // use your helper; no extra setState
        }

        return updated;
      });
    }, 2000);

    return () => clearInterval(interval);
  }, []);

  return (
    <div className="flex flex-col mx-auto items-center justify-center min-h-screen">
      <table>
        <thead>
          <tr>
            <th>type </th>
            <th>symbol</th>
            <th>price </th>
            <th>quantity </th>
          </tr>
        </thead>
        <tbody>
          {orders.map((o) => (
            <tr key={o.id} className = {`rounded-4xl ${o.id === lastUpdatedId ? 'bg-yellow-100' : 'bg-white'}`}>
              <td>{o.type}</td>
              <td>{o.symbol}</td>
              <td>{o.price}</td>
              <td>{o.quantity}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}
\n\n# ===== ./d-8/frontend/page.tsx =====\n
\n\n# ===== ./d-8/frontend/page.tsx =====\n
"use client";
import { useEffect, useState } from "react";

interface Trade {
  id: string;
  symbol: string;
  side: string;
  price: number;
  quantity: number;
}

const API_BASE = "http://127.0.0.1:5000";

export default function TradeTable() {
  const [trades, setTrades] = useState<Trade[]>([]);
  const [symbols, setSymbols] = useState<string[]>([]);
  const [selected, setSelected] = useState<string>("ALL");
  const [loading, setLoading] = useState(false);

  // fetch symbols on mount
  useEffect(() => {
    fetch(`${API_BASE}/symbols`)
      .then((res) => res.json())
      .then((data) => setSymbols(["ALL", ...data]));
  }, []);

  // fetch trades whenever selected symbol changes
  useEffect(() => {
    setLoading(true);
    const url =
      selected === "ALL"
        ? `${API_BASE}/trades`
        : `${API_BASE}/trades?symbol=${selected}`;
    fetch(url)
      .then((res) => res.json())
      .then((data) => setTrades(data))
      .finally(() => setLoading(false));
  }, [selected]);

  const addTrade = async () => {
    await fetch(`${API_BASE}/trades`, { method: "POST" });
    // refetch after adding
    const data = await fetch(`${API_BASE}/trades`).then((r) => r.json());
    setTrades(data);
  };

  const clearTrades = async () => {
    await fetch(`${API_BASE}/trades`, { method: "DELETE" });
    setTrades([]);
  };

  return (
    <div style={{ padding: 16 }}>
      <h2>Trade Table</h2>

      <div style={{ marginBottom: 12 }}>
        <label>
          Filter by Symbol:{" "}
          <select
            value={selected}
            onChange={(e) => setSelected(e.target.value)}
          >
            {symbols.map((sym) => (
              <option key={sym} value={sym}>
                {sym}
              </option>
            ))}
          </select>
        </label>
        <button onClick={addTrade} style={{ marginLeft: 8 }}>
          + Add Trade
        </button>
        <button onClick={clearTrades} style={{ marginLeft: 8 }}>
          ðŸ—‘ Clear All
        </button>
      </div>

      {loading ? (
        <p>Loading trades...</p>
      ) : trades.length === 0 ? (
        <p>No trades yet.</p>
      ) : (
        <table border={1} cellPadding={6}>
          <thead>
            <tr>
              <th>Symbol</th>
              <th>Side</th>
              <th>Price</th>
              <th>Quantity</th>
            </tr>
          </thead>
          <tbody>
            {trades.map((t) => (
              <tr key={t.id}>
                <td>{t.symbol}</td>
                <td>{t.side}</td>
                <td>${t.price.toFixed(2)}</td>
                <td>{t.quantity}</td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
}
"use client";
import { useEffect, useState } from "react";

interface Trade {
  id: string;
  symbol: string;
  side: string;
  price: number;
  quantity: number;
}

const API_BASE = "http://127.0.0.1:5000";

export default function TradeTable() {
  const [trades, setTrades] = useState<Trade[]>([]);
  const [symbols, setSymbols] = useState<string[]>([]);
  const [selected, setSelected] = useState<string>("ALL");
  const [loading, setLoading] = useState(false);

  // fetch symbols on mount
  useEffect(() => {
    fetch(`${API_BASE}/symbols`)
      .then((res) => res.json())
      .then((data) => setSymbols(["ALL", ...data]));
  }, []);

  // fetch trades whenever selected symbol changes
  useEffect(() => {
    setLoading(true);
    const url =
      selected === "ALL"
        ? `${API_BASE}/trades`
        : `${API_BASE}/trades?symbol=${selected}`;
    fetch(url)
      .then((res) => res.json())
      .then((data) => setTrades(data))
      .finally(() => setLoading(false));
  }, [selected]);

  const addTrade = async () => {
    await fetch(`${API_BASE}/trades`, { method: "POST" });
    // refetch after adding
    const data = await fetch(`${API_BASE}/trades`).then((r) => r.json());
    setTrades(data);
  };

  const clearTrades = async () => {
    await fetch(`${API_BASE}/trades`, { method: "DELETE" });
    setTrades([]);
  };

  return (
    <div style={{ padding: 16 }}>
      <h2>Trade Table</h2>

      <div style={{ marginBottom: 12 }}>
        <label>
          Filter by Symbol:{" "}
          <select
            value={selected}
            onChange={(e) => setSelected(e.target.value)}
          >
            {symbols.map((sym) => (
              <option key={sym} value={sym}>
                {sym}
              </option>
            ))}
          </select>
        </label>
        <button onClick={addTrade} style={{ marginLeft: 8 }}>
          + Add Trade
        </button>
        <button onClick={clearTrades} style={{ marginLeft: 8 }}>
          ðŸ—‘ Clear All
        </button>
      </div>

      {loading ? (
        <p>Loading trades...</p>
      ) : trades.length === 0 ? (
        <p>No trades yet.</p>
      ) : (
        <table border={1} cellPadding={6}>
          <thead>
            <tr>
              <th>Symbol</th>
              <th>Side</th>
              <th>Price</th>
              <th>Quantity</th>
            </tr>
          </thead>
          <tbody>
            {trades.map((t) => (
              <tr key={t.id}>
                <td>{t.symbol}</td>
                <td>{t.side}</td>
                <td>${t.price.toFixed(2)}</td>
                <td>{t.quantity}</td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
}
\n\n# ===== ./d-12/page.tsx =====\n
\n\n# ===== ./d-12/page.tsx =====\n
"use client";

import { useState } from "react";

interface Trade {
  id : number,
  symbol : string,
  side : string,
  price : number,
  quantity : number,
  timestamp : string
}

const mockTrades = [
  {
    id: 1,
    symbol: "AAPL",
    side: "BUY",
    price: 150.25,
    quantity: 100,
    timestamp: "2024-10-16T09:30:00Z",
  },
  {
    id: 2,
    symbol: "TSLA",
    side: "SELL",
    price: 242.5,
    quantity: 50,
    timestamp: "2024-10-16T09:31:15Z",
  },
  {
    id: 3,
    symbol: "AAPL",
    side: "SELL",
    price: 151.0,
    quantity: 75,
    timestamp: "2024-10-16T09:32:30Z",
  },
  {
    id: 4,
    symbol: "MSFT",
    side: "BUY",
    price: 380.75,
    quantity: 200,
    timestamp: "2024-10-16T09:33:45Z",
  },
  {
    id: 5,
    symbol: "TSLA",
    side: "BUY",
    price: 241.0,
    quantity: 100,
    timestamp: "2024-10-16T09:35:00Z",
  },
  {
    id: 6,
    symbol: "MSFT",
    side: "SELL",
    price: 381.25,
    quantity: 150,
    timestamp: "2024-10-16T09:36:20Z",
  },
];

const symbolSet = [...new Set(mockTrades.map((t) => t.symbol))];

export default function App() {
  const [query, setQuery] = useState("");

  let filteredTrades;

  if (query) {
    filteredTrades = mockTrades.filter((t) => t.symbol === query);
  } else {
    filteredTrades = mockTrades;
  }

  let totalTrades = filteredTrades.length;
  let totalSum = filteredTrades.reduce((sum, trade) => sum + trade.quantity, 0);

  return (
    <main className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 py-8 px-4">
      <div className="max-w-7xl mx-auto">
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold text-slate-800 mb-2">
            Trade Dashboard
          </h1>
          <p className="text-slate-600">
            Filter and view your trading activity
          </p>
        </div>

        <div className="bg-white rounded-xl shadow-lg p-6 mb-8">
          <div className="flex flex-col sm:flex-row items-center gap-4 mb-6">
            <label
              htmlFor="symbol"
              className="text-sm font-medium text-slate-700 whitespace-nowrap"
            >
              Filter by Symbol:
            </label>
            <div className="relative flex-1 w-full sm:w-auto">
              <select
                id="symbol"
                value={query}
                onChange={(e) => setQuery(e.target.value)}
                className="w-full px-4 py-3 bg-white border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors appearance-none cursor-pointer"
              >
                <option value="">All Symbols</option>
                {symbolSet.map((t) => (
                  <option key={t} value={t}>
                    {t}
                  </option>
                ))}
              </select>
              <div className="absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none">
                <svg
                  className="w-4 h-4 text-slate-400"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M19 9l-7 7-7-7"
                  />
                </svg>
              </div>
            </div>
          </div>

          <div className="overflow-x-auto bg-white rounded-xl shadow-lg border border-slate-200">
            <table className="w-full">
              <thead>
                <tr className="bg-gradient-to-r from-slate-50 to-slate-100 border-b border-slate-200">
                  <th className="px-6 py-4 text-left text-xs font-semibold text-slate-600 uppercase tracking-wider">
                    ID
                  </th>
                  <th className="px-6 py-4 text-left text-xs font-semibold text-slate-600 uppercase tracking-wider">
                    Symbol
                  </th>
                  <th className="px-6 py-4 text-left text-xs font-semibold te"use client";

import { useState } from "react";

interface Trade {
  id : number,
  symbol : string,
  side : string,
  price : number,
  quantity : number,
  timestamp : string
}

const mockTrades = [
  {
    id: 1,
    symbol: "AAPL",
    side: "BUY",
    price: 150.25,
    quantity: 100,
    timestamp: "2024-10-16T09:30:00Z",
  },
  {
    id: 2,
    symbol: "TSLA",
    side: "SELL",
    price: 242.5,
    quantity: 50,
    timestamp: "2024-10-16T09:31:15Z",
  },
  {
    id: 3,
    symbol: "AAPL",
    side: "SELL",
    price: 151.0,
    quantity: 75,
    timestamp: "2024-10-16T09:32:30Z",
  },
  {
    id: 4,
    symbol: "MSFT",
    side: "BUY",
    price: 380.75,
    quantity: 200,
    timestamp: "2024-10-16T09:33:45Z",
  },
  {
    id: 5,
    symbol: "TSLA",
    side: "BUY",
    price: 241.0,
    quantity: 100,
    timestamp: "2024-10-16T09:35:00Z",
  },
  {
    id: 6,
    symbol: "MSFT",
    side: "SELL",
    price: 381.25,
    quantity: 150,
    timestamp: "2024-10-16T09:36:20Z",
  },
];

const symbolSet = [...new Set(mockTrades.map((t) => t.symbol))];

export default function App() {
  const [query, setQuery] = useState("");

  let filteredTrades;

  if (query) {
    filteredTrades = mockTrades.filter((t) => t.symbol === query);
  } else {
    filteredTrades = mockTrades;
  }

  let totalTrades = filteredTrades.length;
  let totalSum = filteredTrades.reduce((sum, trade) => sum + trade.quantity, 0);

  return (
    <main className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 py-8 px-4">
      <div className="max-w-7xl mx-auto">
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold text-slate-800 mb-2">
            Trade Dashboard
          </h1>
          <p className="text-slate-600">
            Filter and view your trading activity
          </p>
        </div>

        <div className="bg-white rounded-xl shadow-lg p-6 mb-8">
          <div className="flex flex-col sm:flex-row items-center gap-4 mb-6">
            <label
              htmlFor="symbol"
              className="text-sm font-medium text-slate-700 whitespace-nowrap"
            >
              Filter by Symbol:
            </label>
            <div className="relative flex-1 w-full sm:w-auto">
              <select
                id="symbol"
                value={query}
                onChange={(e) => setQuery(e.target.value)}
                className="w-full px-4 py-3 bg-white border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors appearance-none cursor-pointer"
              >
                <option value="">All Symbols</option>
                {symbolSet.map((t) => (
                  <option key={t} value={t}>
                    {t}
                  </option>
                ))}
              </select>
              <div className="absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none">
                <svg
                  className="w-4 h-4 text-slate-400"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M19 9l-7 7-7-7"
                  />
                </svg>
              </div>
            </div>
          </div>

          <div className="overflow-x-auto bg-white rounded-xl shadow-lg border border-slate-200">
            <table className="w-full">
              <thead>
                <tr className="bg-gradient-to-r from-slate-50 to-slate-100 border-b border-slate-200">
                  <th className="px-6 py-4 text-left text-xs font-semibold text-slate-600 uppercase tracking-wider">
                    ID
                  </th>
                  <th className="px-6 py-4 text-left text-xs font-semibold text-slate-600 uppercase tracking-wider">
                    Symbol
                  </th>
                  <th className="px-6 py-4 text-left text-xs font-semibold text-slate-600 uppercase tracking-wider">
                    Side
                  </th>
                  <th className="px-6 py-4 text-left text-xs font-semibold text-slate-600 uppercase tracking-wider">
                    Price
                  </th>
                  <th className="px-6 py-4 text-left text-xs font-semibold text-slate-600 uppercase tracking-wider">
                    Quantity
                  </th>
                  <th className="px-6 py-4 text-left text-xs font-semibold text-slate-600 uppercase tracking-wider">
                    Timestamp
                  </th>
                </tr>
              </thead>
              <tbody className="divide-y divide-slate-200">
                {filteredTrades.map((t) => (
                  <tr
                    key={t.id}
                    className="hover:bg-slate-50 transition-all duration-200 group"
                  >
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-slate-900 group-hover:text-slate-700">
                      #{t.id}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800 border border-blue-200 hover:bg-blue-200 transition-colors">
                        {t.symbol}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span
                        className={`inline-flex items-center px-3 py-1 rounded-full text-xs font-medium border transition-colors ${
                          t.side === "BUY"
                            ? "bg-green-100 text-green-800 border-green-200 hover:bg-green-200"
                            : "bg-red-100 text-red-800 border-red-200 hover:bg-red-200"
                        }`}
                      >
                        {t.side}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-semibold text-slate-900">
                      ${t.price.toFixed(2)}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-slate-900 font-medium">
                      {t.quantity.toLocaleString()}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-slate-600">
                      {new Date(t.timestamp).toLocaleString()}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>

          {filteredTrades.length === 0 && (
            <div className="text-center py-12">
              <div className="text-slate-400 mb-2">
                <svg
                  className="mx-auto h-12 w-12"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
                  />
                </svg>
              </div>
              <h3 className="text-lg font-medium text-slate-900 mb-1">
                No trades found
              </h3>
              <p className="text-slate-500">
                Try selecting a different symbol from the filter above.
              </p>
            </div>
          )}
        </div>
        <div className="bg-white rounded-xl shadow-lg p-6 border border-slate-200">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="text-center p-4 bg-gradient-to-r from-blue-50 to-blue-100 rounded-lg border border-blue-200">
              <div className="flex items-center justify-center mb-2">
                <svg
                  className="w-5 h-5 text-blue-600 mr-2"
             xt-slate-600 uppercase tracking-wider">
                    Side
                  </th>
                  <th className="px-6 py-4 text-left text-xs font-semibold text-slate-600 uppercase tracking-wider">
                    Price
                  </th>
                  <th className="px-6 py-4 text-left text-xs font-semibold text-slate-600 uppercase tracking-wider">
                    Quantity
                  </th>
                  <th className="px-6 py-4 text-left text-xs font-semibold text-slate-600 uppercase tracking-wider">
                    Timestamp
                  </th>
                </tr>
              </thead>
              <tbody className="divide-y divide-slate-200">
                {filteredTrades.map((t) => (
                  <tr
                    key={t.id}
                    className="hover:bg-slate-50 transition-all duration-200 group"
                  >
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-slate-900 group-hover:text-slate-700">
                      #{t.id}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800 border border-blue-200 hover:bg-blue-200 transition-colors">
                        {t.symbol}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span
                        className={`inline-flex items-center px-3 py-1 rounded-full text-xs font-medium border transition-colors ${
                          t.side === "BUY"
                            ? "bg-green-100 text-green-800 border-green-200 hover:bg-green-200"
                            : "bg-red-100 text-red-800 border-red-200 hover:bg-red-200"
                        }`}
                      >
                        {t.side}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-semibold text-slate-900">
                      ${t.price.toFixed(2)}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-slate-900 font-medium">
                      {t.quantity.toLocaleString()}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-slate-600">
                      {new Date(t.timestamp).toLocaleString()}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>

          {filteredTrades.length === 0 && (
            <div className="text-center py-12">
              <div className="text-slate-400 mb-2">
                <svg
                  className="mx-auto h-12 w-12"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
                  />
                </svg>
              </div>
              <h3 className="text-lg font-medium text-slate-900 mb-1">
                No trades found
              </h3>
              <p className="text-slate-500">
                Try selecting a different symbol from the filter above.
              </p>
            </div>
          )}
        </div>
        <div className="bg-white rounded-xl shadow-lg p-6 border border-slate-200">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="text-center p-4 bg-gradient-to-r from-blue-50 to-blue-100 rounded-lg border border-blue-200">
              <div className="flex items-center justify-center mb-2">
                <svg
                  className="w-5 h-5 text-blue-600 mr-2"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
                  />
                </svg>
                <span className="text-sm font-medium text-blue-800 uppercase tracking-wide">
                  Total Trades
                </span>
              </div>
              <p className="text-3xl font-bold text-blue-900">
                {totalTrades.toLocaleString()}
              </p>
            </div>

            <div className="text-center p-4 bg-gradient-to-r from-green-50 to-green-100 rounded-lg border border-green-200">
              <div className="flex items-center justify-center mb-2">
                <svg
                  className="w-5 h-5 text-green-600 mr-2"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"
                  />
                </svg>
                <span className="text-sm font-medium text-green-800 uppercase tracking-wide">
                  Total Volume
                </span>
              </div>
              <p className="text-3xl font-bold text-green-900">
                {totalSum.toLocaleString()}
              </p>
            </div>
          </div>
        </div>
      </div>
    </main>
  );
}
     fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
                  />
                </svg>
                <span className="text-sm font-medium text-blue-800 uppercase tracking-wide">
                  Total Trades
                </span>
              </div>
              <p className="text-3xl font-bold text-blue-900">
                {totalTrades.toLocaleString()}
              </p>
            </div>

            <div className="text-center p-4 bg-gradient-to-r from-green-50 to-green-100 rounded-lg border border-green-200">
              <div className="flex items-center justify-center mb-2">
                <svg
                  className="w-5 h-5 text-green-600 mr-2"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"
                  />
                </svg>
                <span className="text-sm font-medium text-green-800 uppercase tracking-wide">
                  Total Volume
                </span>
              </div>
              <p className="text-3xl font-bold text-green-900">
                {totalSum.toLocaleString()}
              </p>
            </div>
          </div>
        </div>
      </div>
    </main>
  );
}
\n\n# ===== ./d-15/page.tsx =====\n
\n\n# ===== ./d-15/page.tsx =====\n
"use client";

import { useState, useEffect, useMemo} from "react";

interface Posts {
  userId: number;
  id: number;
  title: string;
  body: string;
}

export function useDebounce<T>(value : T, delay = 300) : T {
  const [debounced, setDebounced] = useState(value)

  useEffect(() => {
    const timer = setTimeout(() => setDebounced(value), delay)
    return () => clearTimeout(timer)
  }, [value, delay])

  return debounced;
}

export default function App() {
  const [post, setPosts] = useState<Posts[]>([]);
  const [error, setError] = useState("");
  const [loading, setLoading] = useState(true);
  const [input, setInput] = useState("");
  const debouncedSearch = useDebounce(input, 400)

  useEffect(() => {
    fetch("https://jsonplaceholder.typicode.com/posts")
      .then((r) => {
        if (!r.ok) throw new Error(`HTTP ${r.status}`);
        return r.json();
      })
      .then((t) => setPosts(t))
      .catch((error) => setError(error))
      .finally(() => setLoading(false));
  }, []);

  const filtered = useMemo(() => {
    return post.filter((u) => (
       u.title.toLowerCase().includes(debouncedSearch.toLowerCase())
    ))
  }, [post, debouncedSearch])

  return (
    <main className="min-h-screen bg-gradient-to-br from-slate-50 to-gray-100">
      <div className="container mx-auto px-6 max-w-7xl py-12">
        <div className="mb-8">
          <input
            type="text"
            placeholder="Search posts by title..."
            value={input}
            onChange={(e) => setInput(e.target.value)}
            className="w-full max-w-md mx-auto block px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition-colors"
          />
        </div>
        {loading ? (
          <div className="text-center py-16">
            <div className="inline-flex items-center gap-3 text-lg text-gray-600">
              <div className="w-6 h-6 border-2 border-blue-600 border-t-transparent rounded-full animate-spin"></div>
              Loading posts...
            </div>
          </div>
        ) : filtered.length === 0 ? (
          <div className="text-center py-16">
            <div className="text-gray-500 text-lg">
              {error || `No posts match "${input}"`}
            </div>
          </div>
        ) : (
          <div className="grid gap-8 md:grid-cols-2 lg:grid-cols-3">
            {filtered.map((t) => (
              <div key={t.id} className="bg-white rounded-lg shadow-sm hover:shadow-md transition-all duration-200 p-6 border border-gray-100">
                <div className="mb-4">
                  <div className="text-xs font-medium text-blue-600 bg-blue-50 px-2 py-1 rounded-full w-fit mb-3">
                    User {t.userId}
                  </div>
                  <div className="text-lg font-semibold text-gray-900 mb-3 leading-tight">
                    {t.title}
                  </div>
                </div>
                <div className="text-gray-600 leading-relaxed">
                  {t.body}
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </main>
  );
}
"use client";

import { useState, useEffect, useMemo} from "react";

interface Posts {
  userId: number;
  id: number;
  title: string;
  body: string;
}

export function useDebounce<T>(value : T, delay = 300) : T {
  const [debounced, setDebounced] = useState(value)

  useEffect(() => {
    const timer = setTimeout(() => setDebounced(value), delay)
    return () => clearTimeout(timer)
  }, [value, delay])

  return debounced;
}

export default function App() {
  const [post, setPosts] = useState<Posts[]>([]);
  const [error, setError] = useState("");
  const [loading, setLoading] = useState(true);
  const [input, setInput] = useState("");
  const debouncedSearch = useDebounce(input, 400)

  useEffect(() => {
    fetch("https://jsonplaceholder.typicode.com/posts")
      .then((r) => {
        if (!r.ok) throw new Error(`HTTP ${r.status}`);
        return r.json();
      })
      .then((t) => setPosts(t))
      .catch((error) => setError(error))
      .finally(() => setLoading(false));
  }, []);

  const filtered = useMemo(() => {
    return post.filter((u) => (
       u.title.toLowerCase().includes(debouncedSearch.toLowerCase())
    ))
  }, [post, debouncedSearch])

  return (
    <main className="min-h-screen bg-gradient-to-br from-slate-50 to-gray-100">
      <div className="container mx-auto px-6 max-w-7xl py-12">
        <div className="mb-8">
          <input
            type="text"
            placeholder="Search posts by title..."
            value={input}
            onChange={(e) => setInput(e.target.value)}
            className="w-full max-w-md mx-auto block px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition-colors"
          />
        </div>
        {loading ? (
          <div className="text-center py-16">
            <div className="inline-flex items-center gap-3 text-lg text-gray-600">
              <div className="w-6 h-6 border-2 border-blue-600 border-t-transparent rounded-full animate-spin"></div>
              Loading posts...
            </div>
          </div>
        ) : filtered.length === 0 ? (
          <div className="text-center py-16">
            <div className="text-gray-500 text-lg">
              {error || `No posts match "${input}"`}
            </div>
          </div>
        ) : (
          <div className="grid gap-8 md:grid-cols-2 lg:grid-cols-3">
            {filtered.map((t) => (
              <div key={t.id} className="bg-white rounded-lg shadow-sm hover:shadow-md transition-all duration-200 p-6 border border-gray-100">
                <div className="mb-4">
                  <div className="text-xs font-medium text-blue-600 bg-blue-50 px-2 py-1 rounded-full w-fit mb-3">
                    User {t.userId}
                  </div>
                  <div className="text-lg font-semibold text-gray-900 mb-3 leading-tight">
                    {t.title}
                  </div>
                </div>
                <div className="text-gray-600 leading-relaxed">
                  {t.body}
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </main>
  );
}
\n\n# ===== ./d-9/frontend/page.tsx =====\n
\n\n# ===== ./d-9/frontend/page.tsx =====\n
"use client";
import { useState, useEffect } from "react";

const API_BASE = "http://localhost:5001";

type Counter = { value: number };

export default function App() {
  const [count, setCount] = useState(0);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    fetch(`${API_BASE}/count`)
    .then((res) => res.json())
    .then((data : Counter) => setCount(data.value))
    .catch((err) => console.error("Failed to fetch count: ", err))
  }, [])

  async function handleIncrement() {
    setLoading(true)
    try {
        const res = await fetch (`${API_BASE}/count/increment`, {
            method : "POST",
        });
        const data : Counter = await res.json();
        setCount(data.value);
    } catch (err){
        console.log("Increment failed: ", err)
    } finally {
        setLoading(false);
    }
  }

  return (
    <main className="flex min-h-screen flex-col items-center justify-center bg-gray-50">
      <div className="w-full max-w-7xl px-6 flex flex-col gap-6">
        <h1>Counter</h1>
        <p>Current value : {count ?? "Loading..."}</p>
        <button onClick = {handleIncrement} disabled = {loading}>
            {loading ? "Incrementing" : "Increment"}
        </button>
      </div>
    </main>
  );
}
"use client";
import { useState, useEffect } from "react";

const API_BASE = "http://localhost:5001";

type Counter = { value: number };

export default function App() {
  const [count, setCount] = useState(0);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    fetch(`${API_BASE}/count`)
    .then((res) => res.json())
    .then((data : Counter) => setCount(data.value))
    .catch((err) => console.error("Failed to fetch count: ", err))
  }, [])

  async function handleIncrement() {
    setLoading(true)
    try {
        const res = await fetch (`${API_BASE}/count/increment`, {
            method : "POST",
        });
        const data : Counter = await res.json();
        setCount(data.value);
    } catch (err){
        console.log("Increment failed: ", err)
    } finally {
        setLoading(false);
    }
  }

  return (
    <main className="flex min-h-screen flex-col items-center justify-center bg-gray-50">
      <div className="w-full max-w-7xl px-6 flex flex-col gap-6">
        <h1>Counter</h1>
        <p>Current value : {count ?? "Loading..."}</p>
        <button onClick = {handleIncrement} disabled = {loading}>
            {loading ? "Incrementing" : "Increment"}
        </button>
      </div>
    </main>
  );
}
\n\n# ===== ./d-9/backend/main.py =====\n
\n\n# ===== ./d-9/backend/main.py =====\n
from flask import Flask
from flask import jsonify
from flask_cors import CORS

app = Flask(__name__)

CORS(app)

counter = {"value" : 0}

@app.route("/hello", methods= ["GET"])
def hello():
    return "hi", 200

@app.route("/status", methods = ["GET"])
def status():
    return jsonify({"ok" : True, "service" : "counter"}), 200

@app.route("/count", methods = ["GET"])
def get_count():
    return jsonify(counter), 200

@app.route("/count/increment", methods = ["POST"])
def increment_count():
    counter["value"] += 1
    return jsonify(counter), 200

if __name__ == "__main__":
    app.run(debug=True, host="0.0.0.0", port=5001)from flask import Flask
from flask import jsonify
from flask_cors import CORS

app = Flask(__name__)

CORS(app)

counter = {"value" : 0}

@app.route("/hello", methods= ["GET"])
def hello():
    return "hi", 200

@app.route("/status", methods = ["GET"])
def status():
    return jsonify({"ok" : True, "service" : "counter"}), 200

@app.route("/count", methods = ["GET"])
def get_count():
    return jsonify(counter), 200

@app.route("/count/increment", methods = ["POST"])
def increment_count():
    counter["value"] += 1
    return jsonify(counter), 200

if __name__ == "__main__":
    app.run(debug=True, host="0.0.0.0", port=5001)\n\n# ===== ./d-7/frontend/page.tsx =====\n
\n\n# ===== ./d-7/frontend/page.tsx =====\n
"use client";
import { useState, useMemo } from "react";

interface Trade {
  id: number;
  symbol: string;
  side: string;
  price: number;
  quantity: number;
  timestamp: string;
}

const mockTrades = [
  {
    id: 1,
    symbol: "AAPL",
    side: "BUY",
    price: 150.25,
    quantity: 100,
    timestamp: "2024-10-14T10:30:00Z",
  },
  {
    id: 2,
    symbol: "TSLA",
    side: "SELL",
    price: 242.5,
    quantity: 50,
    timestamp: "2024-10-14T10:31:00Z",
  },
  {
    id: 3,
    symbol: "AAPL",
    side: "SELL",
    price: 151.0,
    quantity: 100,
    timestamp: "2024-10-14T10:32:00Z",
  },
  // ... a few more
];

type SymbolFilter = "ALL" | string;

export default function App() {
  const [selectedSymbol, setSelectedSymbol] = useState<SymbolFilter>("ALL");

  const symbols = useMemo(
    () => Array.from(new Set(mockTrades.map((t) => t.symbol))).sort(),
    []
  );

  const filteredTrades = useMemo(() => {
    if (selectedSymbol === "ALL") return mockTrades;
    return mockTrades.filter((t) => t.symbol === selectedSymbol);
  }, [selectedSymbol]);

  return (
    <div className="flex flex-col mx-auto items-center justify-center min-h-screen gap-4 p-4">
      <div className="w-full max-w-4xl">
        <label htmlFor="symbol-filter" className="mr-2 font-medium">
          Filter by symbol:
        </label>
        <select
          id="symbol-filter"
          className="border rounded px-2 py-1"
          value={selectedSymbol}
          onChange={(e) => setSelectedSymbol(e.target.value)}
        >
          <option value="ALL">All Symbols</option>
          {symbols.map((sym) => (
            <option key={sym} value={sym}>
              {sym}
            </option>
          ))}
        </select>
      </div>
      <table>
        <thead>
          <tr>
            <th>id</th>
            <th>symbol</th>
            <th>side</th>
            <th>price</th>
            <th>quantity</th>
            <th>timestamp</th>
          </tr>
        </thead>
        <tbody>
          {filteredTrades.map((t) => (
            <tr key={t.id} className="border-b hover:bg-black/5">
              <td className="py-2 pr-4">{t.id}</td>
              <td className="py-2 pr-4">{t.symbol}</td>
              <td className={`py-2 pr-4 font-semibold`}>{t.side}</td>
              <td className="py-2 pr-4">{t.price}</td>
              <td className="py-2 pr-4">{t.quantity}</td>
              <td className="py-2 pr-4">{t.timestamp}</td>
            </tr>
          ))}
          {filteredTrades.length === 0 && (
            <tr>
              <td colSpan={6} className="py-6 text-center text-sm opacity-70">
                No trades for {selectedSymbol}.
              </td>
            </tr>
          )}
        </tbody>
      </table>
    </div>
  );
}
"use client";
import { useState, useMemo } from "react";

interface Trade {
  id: number;
  symbol: string;
  side: string;
  price: number;
  quantity: number;
  timestamp: string;
}

const mockTrades = [
  {
    id: 1,
    symbol: "AAPL",
    side: "BUY",
    price: 150.25,
    quantity: 100,
    timestamp: "2024-10-14T10:30:00Z",
  },
  {
    id: 2,
    symbol: "TSLA",
    side: "SELL",
    price: 242.5,
    quantity: 50,
    timestamp: "2024-10-14T10:31:00Z",
  },
  {
    id: 3,
    symbol: "AAPL",
    side: "SELL",
    price: 151.0,
    quantity: 100,
    timestamp: "2024-10-14T10:32:00Z",
  },
  // ... a few more
];

type SymbolFilter = "ALL" | string;

export default function App() {
  const [selectedSymbol, setSelectedSymbol] = useState<SymbolFilter>("ALL");

  const symbols = useMemo(
    () => Array.from(new Set(mockTrades.map((t) => t.symbol))).sort(),
    []
  );

  const filteredTrades = useMemo(() => {
    if (selectedSymbol === "ALL") return mockTrades;
    return mockTrades.filter((t) => t.symbol === selectedSymbol);
  }, [selectedSymbol]);

  return (
    <div className="flex flex-col mx-auto items-center justify-center min-h-screen gap-4 p-4">
      <div className="w-full max-w-4xl">
        <label htmlFor="symbol-filter" className="mr-2 font-medium">
          Filter by symbol:
        </label>
        <select
          id="symbol-filter"
          className="border rounded px-2 py-1"
          value={selectedSymbol}
          onChange={(e) => setSelectedSymbol(e.target.value)}
        >
          <option value="ALL">All Symbols</option>
          {symbols.map((sym) => (
            <option key={sym} value={sym}>
              {sym}
            </option>
          ))}
        </select>
      </div>
      <table>
        <thead>
          <tr>
            <th>id</th>
            <th>symbol</th>
            <th>side</th>
            <th>price</th>
            <th>quantity</th>
            <th>timestamp</th>
          </tr>
        </thead>
        <tbody>
          {filteredTrades.map((t) => (
            <tr key={t.id} className="border-b hover:bg-black/5">
              <td className="py-2 pr-4">{t.id}</td>
              <td className="py-2 pr-4">{t.symbol}</td>
              <td className={`py-2 pr-4 font-semibold`}>{t.side}</td>
              <td className="py-2 pr-4">{t.price}</td>
              <td className="py-2 pr-4">{t.quantity}</td>
              <td className="py-2 pr-4">{t.timestamp}</td>
            </tr>
          ))}
          {filteredTrades.length === 0 && (
            <tr>
              <td colSpan={6} className="py-6 text-center text-sm opacity-70">
                No trades for {selectedSymbol}.
              </td>
            </tr>
          )}
        </tbody>
      </table>
    </div>
  );
}
\n\n# ===== ./d-7/backend/main.py =====\n
\n\n# ===== ./d-7/backend/main.py =====\n
# from fastapi import FastApi, Query
# from fastapi.middleware.cors import CORSMiddleware
# from typing import List, Optional, Literal, TypedDict
# from datetime import datetime

# app = FastAPI(title = "Trades API", version = "1.0.0")

# app.add_middleware(
#     CORSMiddleware
#     allow_origins=["http://localhost:3000", "http://127.0.0.1:3000"],
#     allow_credentials=True,
#     allow_methods=["*"],
#     allow_headers=["*"],
# )

# Side = Literal["BUY", "SELL"]

# class Trade(TypedDict):
#     id: int
#     symbol : str
#     side : Side
#     price : float
#     quantity : int
#     timestamp : str

# TRADES: List[Trade] = [
#     {
#         "id": 1,
#         "symbol": "AAPL",
#         "side": "BUY",
#         "price": 150.25,
#         "quantity": 100,
#         "timestamp": "2024-10-14T10:30:00Z",
#     },
#     {
#         "id": 2,
#         "symbol": "TSLA",
#         "side": "SELL",
#         "price": 242.5,
#         "quantity": 50,
#         "timestamp": "2024-10-14T10:31:00Z",
#     },
#     {
#         "id": 3,
#         "symbol": "AAPL",
#         "side": "SELL",
#         "price": 151.0,
#         "quantity": 100,
#         "timestamp": "2024-10-14T10:32:00Z",
#     },
#     # add a few more if you want
# ]

# @app.get("/trades")# from fastapi import FastApi, Query
# from fastapi.middleware.cors import CORSMiddleware
# from typing import List, Optional, Literal, TypedDict
# from datetime import datetime

# app = FastAPI(title = "Trades API", version = "1.0.0")

# app.add_middleware(
#     CORSMiddleware
#     allow_origins=["http://localhost:3000", "http://127.0.0.1:3000"],
#     allow_credentials=True,
#     allow_methods=["*"],
#     allow_headers=["*"],
# )

# Side = Literal["BUY", "SELL"]

# class Trade(TypedDict):
#     id: int
#     symbol : str
#     side : Side
#     price : float
#     quantity : int
#     timestamp : str

# TRADES: List[Trade] = [
#     {
#         "id": 1,
#         "symbol": "AAPL",
#         "side": "BUY",
#         "price": 150.25,
#         "quantity": 100,
#         "timestamp": "2024-10-14T10:30:00Z",
#     },
#     {
#         "id": 2,
#         "symbol": "TSLA",
#         "side": "SELL",
#         "price": 242.5,
#         "quantity": 50,
#         "timestamp": "2024-10-14T10:31:00Z",
#     },
#     {
#         "id": 3,
#         "symbol": "AAPL",
#         "side": "SELL",
#         "price": 151.0,
#         "quantity": 100,
#         "timestamp": "2024-10-14T10:32:00Z",
#     },
#     # add a few more if you want
# ]

# @app.get("/trades")\n\n# ===== ./page.tsx =====\n
\n\n# ===== ./page.tsx =====\n
import Image from "next/image";
import Button from "./components/button";

export default function Home() {
  return (
    <div className="flex flex-col mx-auto items-center justify-center min-h-screen gap-12 wrap">
      <Image
        src="/image.png"
        height={300}
        width={300}
        alt="you have to make it"
      />
      <div className="mx-auto grid grid-flow-row grid-cols-6 gap-2">
        <Button link="/d-1" />
        <Button link="/d-2" />
        <Button link="/d-3" />
        <Button link="/d-4" />
        <Button link="/d-5" />
        <Button link="/d-6" />
        <Button link="/d-7/frontend" />
        <Button link="/d-8/frontend" />
        <Button link="/d-9/frontend" />
        <Button link="/d-10/frontend" />
        <Button link="/d-11/frontend" />
        <Button link="/d-12" />
        <Button link="/d-13" />
        <Button link="/d-14" />
        <Button link="/d-15" />
        <Button link="/d-16" />
        <Button link="/d-17" />
        <Button link="/d-18" />
        <Button link="/d-19" />
        <Button link="/d-20" />
        <Button link="/d-21" />
      </div>
    </div>
  );
}
import Image from "next/image";
import Button from "./components/button";

export default function Home() {
  return (
    <div className="flex flex-col mx-auto items-center justify-center min-h-screen gap-12 wrap">
      <Image
        src="/image.png"
        height={300}
        width={300}
        alt="you have to make it"
      />
      <div className="mx-auto grid grid-flow-row grid-cols-6 gap-2">
        <Button link="/d-1" />
        <Button link="/d-2" />
        <Button link="/d-3" />
        <Button link="/d-4" />
        <Button link="/d-5" />
        <Button link="/d-6" />
        <Button link="/d-7/frontend" />
        <Button link="/d-8/frontend" />
        <Button link="/d-9/frontend" />
        <Button link="/d-10/frontend" />
        <Button link="/d-11/frontend" />
        <Button link="/d-12" />
        <Button link="/d-13" />
        <Button link="/d-14" />
        <Button link="/d-15" />
        <Button link="/d-16" />
        <Button link="/d-17" />
        <Button link="/d-18" />
        <Button link="/d-19" />
        <Button link="/d-20" />
        <Button link="/d-21" />
      </div>
    </div>
  );
}
